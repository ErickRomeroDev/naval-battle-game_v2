export circuit addElements(
  value1: Uint<0..100>,
  value2: Uint<0..100>
): Uint<0..200> {
  // Add values from both vectors
  return value1 + value2;
}

// Circuit for fold to accumulate sum
export circuit accumulateSum(
  currentSum: Field,
  value1: Uint<0..200>,
  value2: Uint<0..200>
): Field {
  // Add the current value to the running total  
  return currentSum + value1 + value2;  
}

export circuit mapSum(): Vector<5, Uint<0..200>> {
  const vector1 = [1, 2, 3, 4, 5];
  const vector2 = [5, 4, 3, 2, 1];

  // Apply map with the addElements circuit
  const mappedResult = map((x, y) => x + y, vector1, vector2);

  return mappedResult;
}

export circuit foldSum(): Field {
  const vector1 = [1, 2, 3, 4, 5];
  const vector2 = [5, 4, 3, 2, 1];

  // Apply map with the addElements circuit
  const mappedResult = map((x, y) => x + y, vector1, vector2);

  // Use fold to sum up the elements of the mappedResult
  const totalSum = fold((acc, x, y): Field => acc + x + y as Field, 0, mappedResult, mappedResult);

  return totalSum;
}