'use strict';
const __compactRuntime = require('@midnight-ntwrk/compact-runtime');
const expectedRuntimeVersionString = '0.7.0';
const expectedRuntimeVersion = expectedRuntimeVersionString.split('-')[0].split('.').map(Number);
const actualRuntimeVersion = __compactRuntime.versionString.split('-')[0].split('.').map(Number);
if (expectedRuntimeVersion[0] != actualRuntimeVersion[0]
     || (actualRuntimeVersion[0] == 0 && expectedRuntimeVersion[1] != actualRuntimeVersion[1])
     || expectedRuntimeVersion[1] > actualRuntimeVersion[1]
     || (expectedRuntimeVersion[1] == actualRuntimeVersion[1] && expectedRuntimeVersion[2] > actualRuntimeVersion[2]))
   throw new __compactRuntime.CompactError(`Version mismatch: compiled code expects ${expectedRuntimeVersionString}, runtime is ${__compactRuntime.versionString}`);
{ const MAX_FIELD = 102211695604070082112571065507755096754575920209623522239390234855480569854275933742834077002685857629445612735086326265689167708028928n;
  if (__compactRuntime.MAX_FIELD !== MAX_FIELD)
     throw new __compactRuntime.CompactError(`compiler thinks maximum field value is ${MAX_FIELD}; run time thinks it is ${__compactRuntime.MAX_FIELD}`)
}

var CellState;
(function (CellState) {
  CellState[CellState['unset'] = 0] = 'unset';
  CellState[CellState['hit'] = 1] = 'hit';
  CellState[CellState['miss'] = 2] = 'miss';
})(CellState = exports.CellState || (exports.CellState = {}));

const _descriptor_0 = new __compactRuntime.CompactTypeUnsignedInteger(1n, 1);

const _descriptor_1 = new __compactRuntime.CompactTypeVector(100, _descriptor_0);

const _descriptor_2 = new __compactRuntime.CompactTypeBytes(32);

const _descriptor_3 = new __compactRuntime.CompactTypeUnsignedInteger(4294967295n, 4);

const _descriptor_4 = new __compactRuntime.CompactTypeEnum(2, 1);

const _descriptor_5 = new __compactRuntime.CompactTypeUnsignedInteger(100n, 1);

const _descriptor_6 = new __compactRuntime.CompactTypeBoolean();

const _descriptor_7 = new __compactRuntime.CompactTypeUnsignedInteger(18446744073709551615n, 8);

const _descriptor_8 = new __compactRuntime.CompactTypeUnsignedInteger(65535n, 2);

const _descriptor_9 = new __compactRuntime.CompactTypeVector(2, _descriptor_2);

class _ContractAddress_0 {
  alignment() {
    return _descriptor_2.alignment();
  }
  fromValue(value) {
    return {
      bytes: _descriptor_2.fromValue(value)
    }
  }
  toValue(value) {
    return _descriptor_2.toValue(value.bytes);
  }
}

const _descriptor_10 = new _ContractAddress_0();

const _descriptor_11 = new __compactRuntime.CompactTypeUnsignedInteger(255n, 1);

class Contract {
  witnesses;
  constructor(...args) {
    if (args.length !== 1)
      throw new __compactRuntime.CompactError(`Contract constructor: expected 1 argument, received ${args.length}`);
    const witnesses = args[0];
    if (typeof(witnesses) !== 'object')
      throw new __compactRuntime.CompactError('first (witnesses) argument to Contract constructor is not an object');
    if (typeof(witnesses.local_sk) !== 'function')
      throw new __compactRuntime.CompactError('first (witnesses) argument to Contract constructor does not contain a function-valued field named local_sk');
    if (typeof(witnesses.local_gameplay) !== 'function')
      throw new __compactRuntime.CompactError('first (witnesses) argument to Contract constructor does not contain a function-valued field named local_gameplay');
    if (typeof(witnesses.set_local_gameplay) !== 'function')
      throw new __compactRuntime.CompactError('first (witnesses) argument to Contract constructor does not contain a function-valued field named set_local_gameplay');
    this.witnesses = witnesses;
    this.circuits = {
      joinGame: (...args_0) => {
        if (args_0.length !== 2)
          throw new __compactRuntime.CompactError(`joinGame: expected 2 arguments (as invoked from Typescript), received ${args_0.length}`);
        const contextOrig = args_0[0];
        const player = args_0[1];
        if (!(typeof(contextOrig) === 'object' && contextOrig.originalState != undefined && contextOrig.transactionContext != undefined))
          __compactRuntime.type_error('joinGame',
                                      'argument 1 (as invoked from Typescript)',
                                      './src/naval-battle-game.compact line 55, char 1',
                                      'CircuitContext',
                                      contextOrig)
        if (!(player.buffer instanceof ArrayBuffer && player.BYTES_PER_ELEMENT === 1 && player.length === 32))
          __compactRuntime.type_error('joinGame',
                                      'argument 1 (argument 2 as invoked from Typescript)',
                                      './src/naval-battle-game.compact line 55, char 1',
                                      'Bytes<32>',
                                      player)
        const context = { ...contextOrig };
        const partialProofData = {
          input: {
            value: _descriptor_2.toValue(player),
            alignment: _descriptor_2.alignment()
          },
          output: undefined,
          publicTranscript: [],
          privateTranscriptOutputs: []
        };
        const result = this.#_joinGame_0(context, partialProofData, player);
        partialProofData.output = { value: [], alignment: [] };
        return { result: result, context: context, proofData: partialProofData };
      },
      commitGrid: (...args_0) => {
        if (args_0.length !== 3)
          throw new __compactRuntime.CompactError(`commitGrid: expected 3 arguments (as invoked from Typescript), received ${args_0.length}`);
        const contextOrig = args_0[0];
        const player = args_0[1];
        const playerSetup = args_0[2];
        if (!(typeof(contextOrig) === 'object' && contextOrig.originalState != undefined && contextOrig.transactionContext != undefined))
          __compactRuntime.type_error('commitGrid',
                                      'argument 1 (as invoked from Typescript)',
                                      './src/naval-battle-game.compact line 65, char 1',
                                      'CircuitContext',
                                      contextOrig)
        if (!(player.buffer instanceof ArrayBuffer && player.BYTES_PER_ELEMENT === 1 && player.length === 32))
          __compactRuntime.type_error('commitGrid',
                                      'argument 1 (argument 2 as invoked from Typescript)',
                                      './src/naval-battle-game.compact line 65, char 1',
                                      'Bytes<32>',
                                      player)
        if (!(Array.isArray(playerSetup) && playerSetup.length === 100 && playerSetup.every((t) => typeof(t) === 'bigint' && t >= 0 && t <= 1n)))
          __compactRuntime.type_error('commitGrid',
                                      'argument 2 (argument 3 as invoked from Typescript)',
                                      './src/naval-battle-game.compact line 65, char 1',
                                      'Vector<100, Uint<0..1>>',
                                      playerSetup)
        const context = { ...contextOrig };
        const partialProofData = {
          input: {
            value: _descriptor_2.toValue(player).concat(_descriptor_1.toValue(playerSetup)),
            alignment: _descriptor_2.alignment().concat(_descriptor_1.alignment())
          },
          output: undefined,
          publicTranscript: [],
          privateTranscriptOutputs: []
        };
        const result = this.#_commitGrid_0(context,
                                           partialProofData,
                                           player,
                                           playerSetup);
        partialProofData.output = { value: [], alignment: [] };
        return { result: result, context: context, proofData: partialProofData };
      },
      startGame: (...args_0) => {
        if (args_0.length !== 1)
          throw new __compactRuntime.CompactError(`startGame: expected 1 argument (as invoked from Typescript), received ${args_0.length}`);
        const contextOrig = args_0[0];
        if (!(typeof(contextOrig) === 'object' && contextOrig.originalState != undefined && contextOrig.transactionContext != undefined))
          __compactRuntime.type_error('startGame',
                                      'argument 1 (as invoked from Typescript)',
                                      './src/naval-battle-game.compact line 89, char 1',
                                      'CircuitContext',
                                      contextOrig)
        const context = { ...contextOrig };
        const partialProofData = {
          input: { value: [], alignment: [] },
          output: undefined,
          publicTranscript: [],
          privateTranscriptOutputs: []
        };
        const result = this.#_startGame_0(context, partialProofData);
        partialProofData.output = { value: [], alignment: [] };
        return { result: result, context: context, proofData: partialProofData };
      },
      makeMove: (...args_0) => {
        if (args_0.length !== 3)
          throw new __compactRuntime.CompactError(`makeMove: expected 3 arguments (as invoked from Typescript), received ${args_0.length}`);
        const contextOrig = args_0[0];
        const player = args_0[1];
        const move = args_0[2];
        if (!(typeof(contextOrig) === 'object' && contextOrig.originalState != undefined && contextOrig.transactionContext != undefined))
          __compactRuntime.type_error('makeMove',
                                      'argument 1 (as invoked from Typescript)',
                                      './src/naval-battle-game.compact line 99, char 1',
                                      'CircuitContext',
                                      contextOrig)
        if (!(player.buffer instanceof ArrayBuffer && player.BYTES_PER_ELEMENT === 1 && player.length === 32))
          __compactRuntime.type_error('makeMove',
                                      'argument 1 (argument 2 as invoked from Typescript)',
                                      './src/naval-battle-game.compact line 99, char 1',
                                      'Bytes<32>',
                                      player)
        if (!(typeof(move) === 'bigint' && move >= 0 && move <= 100n))
          __compactRuntime.type_error('makeMove',
                                      'argument 2 (argument 3 as invoked from Typescript)',
                                      './src/naval-battle-game.compact line 99, char 1',
                                      'Uint<0..100>',
                                      move)
        const context = { ...contextOrig };
        const partialProofData = {
          input: {
            value: _descriptor_2.toValue(player).concat(_descriptor_5.toValue(move)),
            alignment: _descriptor_2.alignment().concat(_descriptor_5.alignment())
          },
          output: undefined,
          publicTranscript: [],
          privateTranscriptOutputs: []
        };
        const result = this.#_makeMove_0(context, partialProofData, player, move);
        partialProofData.output = { value: [], alignment: [] };
        return { result: result, context: context, proofData: partialProofData };
      },
      public_key: (...args_0) => {
        if (args_0.length !== 2)
          throw new __compactRuntime.CompactError(`public_key: expected 2 arguments (as invoked from Typescript), received ${args_0.length}`);
        const contextOrig = args_0[0];
        const sk = args_0[1];
        if (!(typeof(contextOrig) === 'object' && contextOrig.originalState != undefined && contextOrig.transactionContext != undefined))
          __compactRuntime.type_error('public_key',
                                      'argument 1 (as invoked from Typescript)',
                                      './src/naval-battle-game.compact line 159, char 1',
                                      'CircuitContext',
                                      contextOrig)
        if (!(sk.buffer instanceof ArrayBuffer && sk.BYTES_PER_ELEMENT === 1 && sk.length === 32))
          __compactRuntime.type_error('public_key',
                                      'argument 1 (argument 2 as invoked from Typescript)',
                                      './src/naval-battle-game.compact line 159, char 1',
                                      'Bytes<32>',
                                      sk)
        const context = { ...contextOrig };
        const partialProofData = {
          input: {
            value: _descriptor_2.toValue(sk),
            alignment: _descriptor_2.alignment()
          },
          output: undefined,
          publicTranscript: [],
          privateTranscriptOutputs: []
        };
        const result = this.#_public_key_0(context, partialProofData, sk);
        partialProofData.output = { value: _descriptor_2.toValue(result), alignment: _descriptor_2.alignment() };
        return { result: result, context: context, proofData: partialProofData };
      },
      vectorHash: (...args_0) => {
        if (args_0.length !== 2)
          throw new __compactRuntime.CompactError(`vectorHash: expected 2 arguments (as invoked from Typescript), received ${args_0.length}`);
        const contextOrig = args_0[0];
        const sk = args_0[1];
        if (!(typeof(contextOrig) === 'object' && contextOrig.originalState != undefined && contextOrig.transactionContext != undefined))
          __compactRuntime.type_error('vectorHash',
                                      'argument 1 (as invoked from Typescript)',
                                      './src/naval-battle-game.compact line 163, char 1',
                                      'CircuitContext',
                                      contextOrig)
        if (!(Array.isArray(sk) && sk.length === 100 && sk.every((t) => typeof(t) === 'bigint' && t >= 0 && t <= 1n)))
          __compactRuntime.type_error('vectorHash',
                                      'argument 1 (argument 2 as invoked from Typescript)',
                                      './src/naval-battle-game.compact line 163, char 1',
                                      'Vector<100, Uint<0..1>>',
                                      sk)
        const context = { ...contextOrig };
        const partialProofData = {
          input: {
            value: _descriptor_1.toValue(sk),
            alignment: _descriptor_1.alignment()
          },
          output: undefined,
          publicTranscript: [],
          privateTranscriptOutputs: []
        };
        const result = this.#_vectorHash_0(context, partialProofData, sk);
        partialProofData.output = { value: _descriptor_2.toValue(result), alignment: _descriptor_2.alignment() };
        return { result: result, context: context, proofData: partialProofData };
      }
    };
    this.impureCircuits = {
      joinGame: this.circuits.joinGame,
      commitGrid: this.circuits.commitGrid,
      startGame: this.circuits.startGame,
      makeMove: this.circuits.makeMove
    };
  }
  initialState(...args) {
    if (args.length !== 2)
      throw new __compactRuntime.CompactError(`Contract state constructor: expected 2 arguments (as invoked from Typescript), received ${args.length}`);
    const constructorContext = args[0];
    const plOne = args[1];
    if (typeof(constructorContext) !== 'object') {
      throw new __compactRuntime.CompactError(`Contract state constructor: expected 'constructorContext' in argument 1 (as invoked from Typescript) to be an object`);
    }
    if (!('initialPrivateState' in constructorContext)) {
      throw new __compactRuntime.CompactError(`Contract state constructor: expected 'initialPrivateState' in argument 1 (as invoked from Typescript)`);
    }
    if (!('initialZswapLocalState' in constructorContext)) {
      throw new __compactRuntime.CompactError(`Contract state constructor: expected 'initialZswapLocalState' in argument 1 (as invoked from Typescript)`);
    }
    if (typeof(constructorContext.initialZswapLocalState) !== 'object') {
      throw new __compactRuntime.CompactError(`Contract state constructor: expected 'initialZswapLocalState' in argument 1 (as invoked from Typescript) to be an object`);
    }
    if (!(plOne.buffer instanceof ArrayBuffer && plOne.BYTES_PER_ELEMENT === 1 && plOne.length === 32))
      __compactRuntime.type_error('Contract state constructor',
                                  'argument 1 (argument 2 as invoked from Typescript)',
                                  './src/naval-battle-game.compact line 38, char 1',
                                  'Bytes<32>',
                                  plOne)
    const state = new __compactRuntime.ContractState();
    let stateValue = __compactRuntime.StateValue.newArray();
    let stateValue_1 = __compactRuntime.StateValue.newArray();
    stateValue_1 = stateValue_1.arrayPush(__compactRuntime.StateValue.newNull());
    stateValue_1 = stateValue_1.arrayPush(__compactRuntime.StateValue.newNull());
    stateValue_1 = stateValue_1.arrayPush(__compactRuntime.StateValue.newNull());
    stateValue_1 = stateValue_1.arrayPush(__compactRuntime.StateValue.newNull());
    stateValue_1 = stateValue_1.arrayPush(__compactRuntime.StateValue.newNull());
    stateValue = stateValue.arrayPush(stateValue_1);
    let stateValue_0 = __compactRuntime.StateValue.newArray();
    stateValue_0 = stateValue_0.arrayPush(__compactRuntime.StateValue.newNull());
    stateValue_0 = stateValue_0.arrayPush(__compactRuntime.StateValue.newNull());
    stateValue_0 = stateValue_0.arrayPush(__compactRuntime.StateValue.newNull());
    stateValue_0 = stateValue_0.arrayPush(__compactRuntime.StateValue.newNull());
    stateValue_0 = stateValue_0.arrayPush(__compactRuntime.StateValue.newNull());
    stateValue_0 = stateValue_0.arrayPush(__compactRuntime.StateValue.newNull());
    stateValue_0 = stateValue_0.arrayPush(__compactRuntime.StateValue.newNull());
    stateValue_0 = stateValue_0.arrayPush(__compactRuntime.StateValue.newNull());
    stateValue_0 = stateValue_0.arrayPush(__compactRuntime.StateValue.newNull());
    stateValue_0 = stateValue_0.arrayPush(__compactRuntime.StateValue.newNull());
    stateValue_0 = stateValue_0.arrayPush(__compactRuntime.StateValue.newNull());
    stateValue_0 = stateValue_0.arrayPush(__compactRuntime.StateValue.newNull());
    stateValue_0 = stateValue_0.arrayPush(__compactRuntime.StateValue.newNull());
    stateValue_0 = stateValue_0.arrayPush(__compactRuntime.StateValue.newNull());
    stateValue_0 = stateValue_0.arrayPush(__compactRuntime.StateValue.newNull());
    stateValue = stateValue.arrayPush(stateValue_0);
    state.data = stateValue;
    state.setOperation('joinGame', new __compactRuntime.ContractOperation());
    state.setOperation('commitGrid', new __compactRuntime.ContractOperation());
    state.setOperation('startGame', new __compactRuntime.ContractOperation());
    state.setOperation('makeMove', new __compactRuntime.ContractOperation());
    const context = {
      originalState: state,
      currentPrivateState: constructorContext.initialPrivateState,
      currentZswapLocalState: constructorContext.initialZswapLocalState,
      transactionContext: new __compactRuntime.QueryContext(state.data, __compactRuntime.dummyContractAddress())
    };
    const partialProofData = {
      input: { value: [], alignment: [] },
      output: undefined,
      publicTranscript: [],
      privateTranscriptOutputs: []
    };
    Contract._query(context,
                    partialProofData,
                    [
                     { idx: { cached: false,
                              pushPath: true,
                              path: [
                                     { tag: 'value',
                                       value: { value: _descriptor_11.toValue(0n),
                                                alignment: _descriptor_11.alignment() } }
                                    ] } },
                     { push: { storage: false,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_11.toValue(0n),
                                                                            alignment: _descriptor_11.alignment() }).encode() } },
                     { push: { storage: true,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_6.toValue(false),
                                                                            alignment: _descriptor_6.alignment() }).encode() } },
                     { ins: { cached: false, n: 1 } },
                     { ins: { cached: true, n: 1 } }
                    ])
    Contract._query(context,
                    partialProofData,
                    [
                     { idx: { cached: false,
                              pushPath: true,
                              path: [
                                     { tag: 'value',
                                       value: { value: _descriptor_11.toValue(0n),
                                                alignment: _descriptor_11.alignment() } }
                                    ] } },
                     { push: { storage: false,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_11.toValue(1n),
                                                                            alignment: _descriptor_11.alignment() }).encode() } },
                     { push: { storage: true,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_7.toValue(0n),
                                                                            alignment: _descriptor_7.alignment() }).encode() } },
                     { ins: { cached: false, n: 1 } },
                     { ins: { cached: true, n: 1 } }
                    ])
    Contract._query(context,
                    partialProofData,
                    [
                     { idx: { cached: false,
                              pushPath: true,
                              path: [
                                     { tag: 'value',
                                       value: { value: _descriptor_11.toValue(0n),
                                                alignment: _descriptor_11.alignment() } }
                                    ] } },
                     { push: { storage: false,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_11.toValue(2n),
                                                                            alignment: _descriptor_11.alignment() }).encode() } },
                     { push: { storage: true,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_2.toValue(new Uint8Array(32)),
                                                                            alignment: _descriptor_2.alignment() }).encode() } },
                     { ins: { cached: false, n: 1 } },
                     { ins: { cached: true, n: 1 } }
                    ])
    Contract._query(context,
                    partialProofData,
                    [
                     { idx: { cached: false,
                              pushPath: true,
                              path: [
                                     { tag: 'value',
                                       value: { value: _descriptor_11.toValue(0n),
                                                alignment: _descriptor_11.alignment() } }
                                    ] } },
                     { push: { storage: false,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_11.toValue(3n),
                                                                            alignment: _descriptor_11.alignment() }).encode() } },
                     { push: { storage: true,
                               value: __compactRuntime.StateValue.newMap(
                                        new __compactRuntime.StateMap()
                                      ).encode() } },
                     { ins: { cached: false, n: 1 } },
                     { ins: { cached: true, n: 1 } }
                    ])
    Contract._query(context,
                    partialProofData,
                    [
                     { idx: { cached: false,
                              pushPath: true,
                              path: [
                                     { tag: 'value',
                                       value: { value: _descriptor_11.toValue(0n),
                                                alignment: _descriptor_11.alignment() } }
                                    ] } },
                     { push: { storage: false,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_11.toValue(4n),
                                                                            alignment: _descriptor_11.alignment() }).encode() } },
                     { push: { storage: true,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_2.toValue(new Uint8Array(32)),
                                                                            alignment: _descriptor_2.alignment() }).encode() } },
                     { ins: { cached: false, n: 1 } },
                     { ins: { cached: true, n: 1 } }
                    ])
    Contract._query(context,
                    partialProofData,
                    [
                     { idx: { cached: false,
                              pushPath: true,
                              path: [
                                     { tag: 'value',
                                       value: { value: _descriptor_11.toValue(1n),
                                                alignment: _descriptor_11.alignment() } }
                                    ] } },
                     { push: { storage: false,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_11.toValue(0n),
                                                                            alignment: _descriptor_11.alignment() }).encode() } },
                     { push: { storage: true,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_7.toValue(0n),
                                                                            alignment: _descriptor_7.alignment() }).encode() } },
                     { ins: { cached: false, n: 1 } },
                     { ins: { cached: true, n: 1 } }
                    ])
    Contract._query(context,
                    partialProofData,
                    [
                     { idx: { cached: false,
                              pushPath: true,
                              path: [
                                     { tag: 'value',
                                       value: { value: _descriptor_11.toValue(1n),
                                                alignment: _descriptor_11.alignment() } }
                                    ] } },
                     { push: { storage: false,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_11.toValue(1n),
                                                                            alignment: _descriptor_11.alignment() }).encode() } },
                     { push: { storage: true,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_6.toValue(false),
                                                                            alignment: _descriptor_6.alignment() }).encode() } },
                     { ins: { cached: false, n: 1 } },
                     { ins: { cached: true, n: 1 } }
                    ])
    Contract._query(context,
                    partialProofData,
                    [
                     { idx: { cached: false,
                              pushPath: true,
                              path: [
                                     { tag: 'value',
                                       value: { value: _descriptor_11.toValue(1n),
                                                alignment: _descriptor_11.alignment() } }
                                    ] } },
                     { push: { storage: false,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_11.toValue(2n),
                                                                            alignment: _descriptor_11.alignment() }).encode() } },
                     { push: { storage: true,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_6.toValue(false),
                                                                            alignment: _descriptor_6.alignment() }).encode() } },
                     { ins: { cached: false, n: 1 } },
                     { ins: { cached: true, n: 1 } }
                    ])
    Contract._query(context,
                    partialProofData,
                    [
                     { idx: { cached: false,
                              pushPath: true,
                              path: [
                                     { tag: 'value',
                                       value: { value: _descriptor_11.toValue(1n),
                                                alignment: _descriptor_11.alignment() } }
                                    ] } },
                     { push: { storage: false,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_11.toValue(3n),
                                                                            alignment: _descriptor_11.alignment() }).encode() } },
                     { push: { storage: true,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_6.toValue(false),
                                                                            alignment: _descriptor_6.alignment() }).encode() } },
                     { ins: { cached: false, n: 1 } },
                     { ins: { cached: true, n: 1 } }
                    ])
    Contract._query(context,
                    partialProofData,
                    [
                     { idx: { cached: false,
                              pushPath: true,
                              path: [
                                     { tag: 'value',
                                       value: { value: _descriptor_11.toValue(1n),
                                                alignment: _descriptor_11.alignment() } }
                                    ] } },
                     { push: { storage: false,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_11.toValue(4n),
                                                                            alignment: _descriptor_11.alignment() }).encode() } },
                     { push: { storage: true,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_5.toValue(0n),
                                                                            alignment: _descriptor_5.alignment() }).encode() } },
                     { ins: { cached: false, n: 1 } },
                     { ins: { cached: true, n: 1 } }
                    ])
    Contract._query(context,
                    partialProofData,
                    [
                     { idx: { cached: false,
                              pushPath: true,
                              path: [
                                     { tag: 'value',
                                       value: { value: _descriptor_11.toValue(1n),
                                                alignment: _descriptor_11.alignment() } }
                                    ] } },
                     { push: { storage: false,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_11.toValue(5n),
                                                                            alignment: _descriptor_11.alignment() }).encode() } },
                     { push: { storage: true,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_6.toValue(false),
                                                                            alignment: _descriptor_6.alignment() }).encode() } },
                     { ins: { cached: false, n: 1 } },
                     { ins: { cached: true, n: 1 } }
                    ])
    Contract._query(context,
                    partialProofData,
                    [
                     { idx: { cached: false,
                              pushPath: true,
                              path: [
                                     { tag: 'value',
                                       value: { value: _descriptor_11.toValue(1n),
                                                alignment: _descriptor_11.alignment() } }
                                    ] } },
                     { push: { storage: false,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_11.toValue(6n),
                                                                            alignment: _descriptor_11.alignment() }).encode() } },
                     { push: { storage: true,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_2.toValue(new Uint8Array(32)),
                                                                            alignment: _descriptor_2.alignment() }).encode() } },
                     { ins: { cached: false, n: 1 } },
                     { ins: { cached: true, n: 1 } }
                    ])
    Contract._query(context,
                    partialProofData,
                    [
                     { idx: { cached: false,
                              pushPath: true,
                              path: [
                                     { tag: 'value',
                                       value: { value: _descriptor_11.toValue(1n),
                                                alignment: _descriptor_11.alignment() } }
                                    ] } },
                     { push: { storage: false,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_11.toValue(7n),
                                                                            alignment: _descriptor_11.alignment() }).encode() } },
                     { push: { storage: true,
                               value: __compactRuntime.StateValue.newMap(
                                        new __compactRuntime.StateMap()
                                      ).encode() } },
                     { ins: { cached: false, n: 1 } },
                     { ins: { cached: true, n: 1 } }
                    ])
    Contract._query(context,
                    partialProofData,
                    [
                     { idx: { cached: false,
                              pushPath: true,
                              path: [
                                     { tag: 'value',
                                       value: { value: _descriptor_11.toValue(1n),
                                                alignment: _descriptor_11.alignment() } }
                                    ] } },
                     { push: { storage: false,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_11.toValue(8n),
                                                                            alignment: _descriptor_11.alignment() }).encode() } },
                     { push: { storage: true,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_2.toValue(new Uint8Array(32)),
                                                                            alignment: _descriptor_2.alignment() }).encode() } },
                     { ins: { cached: false, n: 1 } },
                     { ins: { cached: true, n: 1 } }
                    ])
    Contract._query(context,
                    partialProofData,
                    [
                     { idx: { cached: false,
                              pushPath: true,
                              path: [
                                     { tag: 'value',
                                       value: { value: _descriptor_11.toValue(1n),
                                                alignment: _descriptor_11.alignment() } }
                                    ] } },
                     { push: { storage: false,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_11.toValue(9n),
                                                                            alignment: _descriptor_11.alignment() }).encode() } },
                     { push: { storage: true,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_7.toValue(0n),
                                                                            alignment: _descriptor_7.alignment() }).encode() } },
                     { ins: { cached: false, n: 1 } },
                     { ins: { cached: true, n: 1 } }
                    ])
    Contract._query(context,
                    partialProofData,
                    [
                     { idx: { cached: false,
                              pushPath: true,
                              path: [
                                     { tag: 'value',
                                       value: { value: _descriptor_11.toValue(1n),
                                                alignment: _descriptor_11.alignment() } }
                                    ] } },
                     { push: { storage: false,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_11.toValue(10n),
                                                                            alignment: _descriptor_11.alignment() }).encode() } },
                     { push: { storage: true,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_6.toValue(false),
                                                                            alignment: _descriptor_6.alignment() }).encode() } },
                     { ins: { cached: false, n: 1 } },
                     { ins: { cached: true, n: 1 } }
                    ])
    Contract._query(context,
                    partialProofData,
                    [
                     { idx: { cached: false,
                              pushPath: true,
                              path: [
                                     { tag: 'value',
                                       value: { value: _descriptor_11.toValue(1n),
                                                alignment: _descriptor_11.alignment() } }
                                    ] } },
                     { push: { storage: false,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_11.toValue(11n),
                                                                            alignment: _descriptor_11.alignment() }).encode() } },
                     { push: { storage: true,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_6.toValue(false),
                                                                            alignment: _descriptor_6.alignment() }).encode() } },
                     { ins: { cached: false, n: 1 } },
                     { ins: { cached: true, n: 1 } }
                    ])
    Contract._query(context,
                    partialProofData,
                    [
                     { idx: { cached: false,
                              pushPath: true,
                              path: [
                                     { tag: 'value',
                                       value: { value: _descriptor_11.toValue(1n),
                                                alignment: _descriptor_11.alignment() } }
                                    ] } },
                     { push: { storage: false,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_11.toValue(12n),
                                                                            alignment: _descriptor_11.alignment() }).encode() } },
                     { push: { storage: true,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_6.toValue(false),
                                                                            alignment: _descriptor_6.alignment() }).encode() } },
                     { ins: { cached: false, n: 1 } },
                     { ins: { cached: true, n: 1 } }
                    ])
    Contract._query(context,
                    partialProofData,
                    [
                     { idx: { cached: false,
                              pushPath: true,
                              path: [
                                     { tag: 'value',
                                       value: { value: _descriptor_11.toValue(1n),
                                                alignment: _descriptor_11.alignment() } }
                                    ] } },
                     { push: { storage: false,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_11.toValue(13n),
                                                                            alignment: _descriptor_11.alignment() }).encode() } },
                     { push: { storage: true,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_5.toValue(0n),
                                                                            alignment: _descriptor_5.alignment() }).encode() } },
                     { ins: { cached: false, n: 1 } },
                     { ins: { cached: true, n: 1 } }
                    ])
    Contract._query(context,
                    partialProofData,
                    [
                     { idx: { cached: false,
                              pushPath: true,
                              path: [
                                     { tag: 'value',
                                       value: { value: _descriptor_11.toValue(1n),
                                                alignment: _descriptor_11.alignment() } }
                                    ] } },
                     { push: { storage: false,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_11.toValue(14n),
                                                                            alignment: _descriptor_11.alignment() }).encode() } },
                     { push: { storage: true,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_6.toValue(false),
                                                                            alignment: _descriptor_6.alignment() }).encode() } },
                     { ins: { cached: false, n: 1 } },
                     { ins: { cached: true, n: 1 } }
                    ])
    this.#_folder_0(context,
                    partialProofData,
                    ((context, partialProofData, t, i) =>
                     {
                       const tmp = i;
                       Contract._query(context,
                                       partialProofData,
                                       [
                                        { idx: { cached: false,
                                                 pushPath: true,
                                                 path: [
                                                        { tag: 'value',
                                                          value: { value: _descriptor_11.toValue(0n),
                                                                   alignment: _descriptor_11.alignment() } },
                                                        { tag: 'value',
                                                          value: { value: _descriptor_11.toValue(3n),
                                                                   alignment: _descriptor_11.alignment() } }
                                                       ] } },
                                        { push: { storage: false,
                                                  value: __compactRuntime.StateValue.newCell({ value: _descriptor_3.toValue(tmp),
                                                                                               alignment: _descriptor_3.alignment() }).encode() } },
                                        { push: { storage: true,
                                                  value: __compactRuntime.StateValue.newCell({ value: _descriptor_4.toValue(0),
                                                                                               alignment: _descriptor_4.alignment() }).encode() } },
                                        { ins: { cached: false, n: 1 } },
                                        { ins: { cached: true, n: 2 } }
                                       ]);
                       const tmp_0 = i;
                       Contract._query(context,
                                       partialProofData,
                                       [
                                        { idx: { cached: false,
                                                 pushPath: true,
                                                 path: [
                                                        { tag: 'value',
                                                          value: { value: _descriptor_11.toValue(1n),
                                                                   alignment: _descriptor_11.alignment() } },
                                                        { tag: 'value',
                                                          value: { value: _descriptor_11.toValue(7n),
                                                                   alignment: _descriptor_11.alignment() } }
                                                       ] } },
                                        { push: { storage: false,
                                                  value: __compactRuntime.StateValue.newCell({ value: _descriptor_3.toValue(tmp_0),
                                                                                               alignment: _descriptor_3.alignment() }).encode() } },
                                        { push: { storage: true,
                                                  value: __compactRuntime.StateValue.newCell({ value: _descriptor_4.toValue(0),
                                                                                               alignment: _descriptor_4.alignment() }).encode() } },
                                        { ins: { cached: false, n: 1 } },
                                        { ins: { cached: true, n: 2 } }
                                       ]);
                       return t;
                     }),
                    false,
                    [1n,
                     2n,
                     3n,
                     4n,
                     5n,
                     6n,
                     7n,
                     8n,
                     9n,
                     10n,
                     11n,
                     12n,
                     13n,
                     14n,
                     15n,
                     16n,
                     17n,
                     18n,
                     19n,
                     20n,
                     21n,
                     22n,
                     23n,
                     24n,
                     25n,
                     26n,
                     27n,
                     28n,
                     29n,
                     30n,
                     31n,
                     32n,
                     33n,
                     34n,
                     35n,
                     36n,
                     37n,
                     38n,
                     39n,
                     40n,
                     41n,
                     42n,
                     43n,
                     44n,
                     45n,
                     46n,
                     47n,
                     48n,
                     49n,
                     50n,
                     51n,
                     52n,
                     53n,
                     54n,
                     55n,
                     56n,
                     57n,
                     58n,
                     59n,
                     60n,
                     61n,
                     62n,
                     63n,
                     64n,
                     65n,
                     66n,
                     67n,
                     68n,
                     69n,
                     70n,
                     71n,
                     72n,
                     73n,
                     74n,
                     75n,
                     76n,
                     77n,
                     78n,
                     79n,
                     80n,
                     81n,
                     82n,
                     83n,
                     84n,
                     85n,
                     86n,
                     87n,
                     88n,
                     89n,
                     90n,
                     91n,
                     92n,
                     93n,
                     94n,
                     95n,
                     96n,
                     97n,
                     98n,
                     99n,
                     100n]);
    Contract._query(context,
                    partialProofData,
                    [
                     { idx: { cached: false,
                              pushPath: true,
                              path: [
                                     { tag: 'value',
                                       value: { value: _descriptor_11.toValue(0n),
                                                alignment: _descriptor_11.alignment() } }
                                    ] } },
                     { push: { storage: false,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_11.toValue(0n),
                                                                            alignment: _descriptor_11.alignment() }).encode() } },
                     { push: { storage: true,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_6.toValue(false),
                                                                            alignment: _descriptor_6.alignment() }).encode() } },
                     { ins: { cached: false, n: 1 } },
                     { ins: { cached: true, n: 1 } }
                    ]);
    Contract._query(context,
                    partialProofData,
                    [
                     { idx: { cached: false,
                              pushPath: true,
                              path: [
                                     { tag: 'value',
                                       value: { value: _descriptor_11.toValue(1n),
                                                alignment: _descriptor_11.alignment() } }
                                    ] } },
                     { push: { storage: false,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_11.toValue(2n),
                                                                            alignment: _descriptor_11.alignment() }).encode() } },
                     { push: { storage: true,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_6.toValue(true),
                                                                            alignment: _descriptor_6.alignment() }).encode() } },
                     { ins: { cached: false, n: 1 } },
                     { ins: { cached: true, n: 1 } }
                    ]);
    Contract._query(context,
                    partialProofData,
                    [
                     { idx: { cached: false,
                              pushPath: true,
                              path: [
                                     { tag: 'value',
                                       value: { value: _descriptor_11.toValue(1n),
                                                alignment: _descriptor_11.alignment() } }
                                    ] } },
                     { push: { storage: false,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_11.toValue(3n),
                                                                            alignment: _descriptor_11.alignment() }).encode() } },
                     { push: { storage: true,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_6.toValue(true),
                                                                            alignment: _descriptor_6.alignment() }).encode() } },
                     { ins: { cached: false, n: 1 } },
                     { ins: { cached: true, n: 1 } }
                    ]);
    const tmp_1 = 1n;
    Contract._query(context,
                    partialProofData,
                    [
                     { idx: { cached: false,
                              pushPath: true,
                              path: [
                                     { tag: 'value',
                                       value: { value: _descriptor_11.toValue(0n),
                                                alignment: _descriptor_11.alignment() } },
                                     { tag: 'value',
                                       value: { value: _descriptor_11.toValue(1n),
                                                alignment: _descriptor_11.alignment() } }
                                    ] } },
                     { addi: { immediate: parseInt(__compactRuntime.valueToBigInt(
                                            { value: _descriptor_8.toValue(tmp_1),
                                              alignment: _descriptor_8.alignment() }
                                              .value
                                          )) } },
                     { ins: { cached: true, n: 2 } }
                    ]);
    Contract._query(context,
                    partialProofData,
                    [
                     { idx: { cached: false,
                              pushPath: true,
                              path: [
                                     { tag: 'value',
                                       value: { value: _descriptor_11.toValue(0n),
                                                alignment: _descriptor_11.alignment() } }
                                    ] } },
                     { push: { storage: false,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_11.toValue(2n),
                                                                            alignment: _descriptor_11.alignment() }).encode() } },
                     { push: { storage: true,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_2.toValue(plOne),
                                                                            alignment: _descriptor_2.alignment() }).encode() } },
                     { ins: { cached: false, n: 1 } },
                     { ins: { cached: true, n: 1 } }
                    ]);
    Contract._query(context,
                    partialProofData,
                    [
                     { idx: { cached: false,
                              pushPath: true,
                              path: [
                                     { tag: 'value',
                                       value: { value: _descriptor_11.toValue(1n),
                                                alignment: _descriptor_11.alignment() } }
                                    ] } },
                     { push: { storage: false,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_11.toValue(1n),
                                                                            alignment: _descriptor_11.alignment() }).encode() } },
                     { push: { storage: true,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_6.toValue(false),
                                                                            alignment: _descriptor_6.alignment() }).encode() } },
                     { ins: { cached: false, n: 1 } },
                     { ins: { cached: true, n: 1 } }
                    ]);
    Contract._query(context,
                    partialProofData,
                    [
                     { idx: { cached: false,
                              pushPath: true,
                              path: [
                                     { tag: 'value',
                                       value: { value: _descriptor_11.toValue(1n),
                                                alignment: _descriptor_11.alignment() } }
                                    ] } },
                     { push: { storage: false,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_11.toValue(10n),
                                                                            alignment: _descriptor_11.alignment() }).encode() } },
                     { push: { storage: true,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_6.toValue(false),
                                                                            alignment: _descriptor_6.alignment() }).encode() } },
                     { ins: { cached: false, n: 1 } },
                     { ins: { cached: true, n: 1 } }
                    ]);
    Contract._query(context,
                    partialProofData,
                    [
                     { idx: { cached: false,
                              pushPath: true,
                              path: [
                                     { tag: 'value',
                                       value: { value: _descriptor_11.toValue(1n),
                                                alignment: _descriptor_11.alignment() } }
                                    ] } },
                     { push: { storage: false,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_11.toValue(14n),
                                                                            alignment: _descriptor_11.alignment() }).encode() } },
                     { push: { storage: true,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_6.toValue(false),
                                                                            alignment: _descriptor_6.alignment() }).encode() } },
                     { ins: { cached: false, n: 1 } },
                     { ins: { cached: true, n: 1 } }
                    ]);
    Contract._query(context,
                    partialProofData,
                    [
                     { idx: { cached: false,
                              pushPath: true,
                              path: [
                                     { tag: 'value',
                                       value: { value: _descriptor_11.toValue(1n),
                                                alignment: _descriptor_11.alignment() } }
                                    ] } },
                     { push: { storage: false,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_11.toValue(5n),
                                                                            alignment: _descriptor_11.alignment() }).encode() } },
                     { push: { storage: true,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_6.toValue(false),
                                                                            alignment: _descriptor_6.alignment() }).encode() } },
                     { ins: { cached: false, n: 1 } },
                     { ins: { cached: true, n: 1 } }
                    ]);
    state.data = context.transactionContext.state;
    return {
      currentContractState: state,
      currentPrivateState: context.currentPrivateState,
      currentZswapLocalState: context.currentZswapLocalState
    }
  }
  #_persistent_hash_0(context, partialProofData, value) {
    const result = __compactRuntime.persistentHash(_descriptor_9, value);
    return result;
  }
  #_persistent_hash_1(context, partialProofData, value) {
    const result = __compactRuntime.persistentHash(_descriptor_1, value);
    return result;
  }
  #_hasShip_0(context, partialProofData, privateVector, targetIndex) {
    const index1 = [1n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n];
    const index2 = [0n,
                    1n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n];
    const index3 = [0n,
                    0n,
                    1n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n];
    const index4 = [0n,
                    0n,
                    0n,
                    1n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n];
    const index5 = [0n,
                    0n,
                    0n,
                    0n,
                    1n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n];
    const index6 = [0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    1n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n];
    const index7 = [0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    1n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n];
    const index8 = [0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    1n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n];
    const index9 = [0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    1n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n,
                    0n];
    const index10 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index11 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index12 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index13 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index14 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index15 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index16 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index17 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index18 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index19 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index20 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index21 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index22 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index23 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index24 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index25 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index26 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index27 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index28 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index29 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index30 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index31 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index32 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index33 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index34 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index35 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index36 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index37 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index38 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index39 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index40 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index41 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index42 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index43 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index44 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index45 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index46 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index47 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index48 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index49 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index50 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index51 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index52 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index53 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index54 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index55 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index56 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index57 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index58 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index59 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index60 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index61 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index62 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index63 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index64 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index65 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index66 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index67 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index68 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index69 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index70 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index71 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index72 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index73 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index74 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index75 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index76 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index77 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index78 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index79 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index80 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index81 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index82 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index83 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index84 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index85 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index86 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index87 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index88 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index89 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index90 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index91 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index92 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index93 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index94 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index95 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index96 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n,
                     0n];
    const index97 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n,
                     0n];
    const index98 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n,
                     0n];
    const index99 = [0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     0n,
                     1n,
                     0n];
    const index100 = [0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      0n,
                      1n];
    const selectedIndex = this.#_equal_0(targetIndex, 1n)?
                          index1 :
                          this.#_equal_1(targetIndex, 2n)?
                          index2 :
                          this.#_equal_2(targetIndex, 3n)?
                          index3 :
                          this.#_equal_3(targetIndex, 4n)?
                          index4 :
                          this.#_equal_4(targetIndex, 5n)?
                          index5 :
                          this.#_equal_5(targetIndex, 6n)?
                          index6 :
                          this.#_equal_6(targetIndex, 7n)?
                          index7 :
                          this.#_equal_7(targetIndex, 8n)?
                          index8 :
                          this.#_equal_8(targetIndex, 9n)?
                          index9 :
                          this.#_equal_9(targetIndex, 10n)?
                          index10 :
                          this.#_equal_10(targetIndex, 11n)?
                          index11 :
                          this.#_equal_11(targetIndex, 12n)?
                          index12 :
                          this.#_equal_12(targetIndex, 13n)?
                          index13 :
                          this.#_equal_13(targetIndex, 14n)?
                          index14 :
                          this.#_equal_14(targetIndex, 15n)?
                          index15 :
                          this.#_equal_15(targetIndex, 16n)?
                          index16 :
                          this.#_equal_16(targetIndex, 17n)?
                          index17 :
                          this.#_equal_17(targetIndex, 18n)?
                          index18 :
                          this.#_equal_18(targetIndex, 19n)?
                          index19 :
                          this.#_equal_19(targetIndex, 20n)?
                          index20 :
                          this.#_equal_20(targetIndex, 21n)?
                          index21 :
                          this.#_equal_21(targetIndex, 22n)?
                          index22 :
                          this.#_equal_22(targetIndex, 23n)?
                          index23 :
                          this.#_equal_23(targetIndex, 24n)?
                          index24 :
                          this.#_equal_24(targetIndex, 25n)?
                          index25 :
                          this.#_equal_25(targetIndex, 26n)?
                          index26 :
                          this.#_equal_26(targetIndex, 27n)?
                          index27 :
                          this.#_equal_27(targetIndex, 28n)?
                          index28 :
                          this.#_equal_28(targetIndex, 29n)?
                          index29 :
                          this.#_equal_29(targetIndex, 30n)?
                          index30 :
                          this.#_equal_30(targetIndex, 31n)?
                          index31 :
                          this.#_equal_31(targetIndex, 32n)?
                          index32 :
                          this.#_equal_32(targetIndex, 33n)?
                          index33 :
                          this.#_equal_33(targetIndex, 34n)?
                          index34 :
                          this.#_equal_34(targetIndex, 35n)?
                          index35 :
                          this.#_equal_35(targetIndex, 36n)?
                          index36 :
                          this.#_equal_36(targetIndex, 37n)?
                          index37 :
                          this.#_equal_37(targetIndex, 38n)?
                          index38 :
                          this.#_equal_38(targetIndex, 39n)?
                          index39 :
                          this.#_equal_39(targetIndex, 40n)?
                          index40 :
                          this.#_equal_40(targetIndex, 41n)?
                          index41 :
                          this.#_equal_41(targetIndex, 42n)?
                          index42 :
                          this.#_equal_42(targetIndex, 43n)?
                          index43 :
                          this.#_equal_43(targetIndex, 44n)?
                          index44 :
                          this.#_equal_44(targetIndex, 45n)?
                          index45 :
                          this.#_equal_45(targetIndex, 46n)?
                          index46 :
                          this.#_equal_46(targetIndex, 47n)?
                          index47 :
                          this.#_equal_47(targetIndex, 48n)?
                          index48 :
                          this.#_equal_48(targetIndex, 49n)?
                          index49 :
                          this.#_equal_49(targetIndex, 50n)?
                          index50 :
                          this.#_equal_50(targetIndex, 51n)?
                          index51 :
                          this.#_equal_51(targetIndex, 52n)?
                          index52 :
                          this.#_equal_52(targetIndex, 53n)?
                          index53 :
                          this.#_equal_53(targetIndex, 54n)?
                          index54 :
                          this.#_equal_54(targetIndex, 55n)?
                          index55 :
                          this.#_equal_55(targetIndex, 56n)?
                          index56 :
                          this.#_equal_56(targetIndex, 57n)?
                          index57 :
                          this.#_equal_57(targetIndex, 58n)?
                          index58 :
                          this.#_equal_58(targetIndex, 59n)?
                          index59 :
                          this.#_equal_59(targetIndex, 60n)?
                          index60 :
                          this.#_equal_60(targetIndex, 61n)?
                          index61 :
                          this.#_equal_61(targetIndex, 62n)?
                          index62 :
                          this.#_equal_62(targetIndex, 63n)?
                          index63 :
                          this.#_equal_63(targetIndex, 63n)?
                          index63 :
                          this.#_equal_64(targetIndex, 64n)?
                          index64 :
                          this.#_equal_65(targetIndex, 65n)?
                          index65 :
                          this.#_equal_66(targetIndex, 66n)?
                          index66 :
                          this.#_equal_67(targetIndex, 67n)?
                          index67 :
                          this.#_equal_68(targetIndex, 68n)?
                          index68 :
                          this.#_equal_69(targetIndex, 69n)?
                          index69 :
                          this.#_equal_70(targetIndex, 70n)?
                          index70 :
                          this.#_equal_71(targetIndex, 71n)?
                          index71 :
                          this.#_equal_72(targetIndex, 72n)?
                          index72 :
                          this.#_equal_73(targetIndex, 73n)?
                          index73 :
                          this.#_equal_74(targetIndex, 74n)?
                          index74 :
                          this.#_equal_75(targetIndex, 75n)?
                          index75 :
                          this.#_equal_76(targetIndex, 76n)?
                          index76 :
                          this.#_equal_77(targetIndex, 77n)?
                          index77 :
                          this.#_equal_78(targetIndex, 78n)?
                          index78 :
                          this.#_equal_79(targetIndex, 79n)?
                          index79 :
                          this.#_equal_80(targetIndex, 80n)?
                          index80 :
                          this.#_equal_81(targetIndex, 81n)?
                          index81 :
                          this.#_equal_82(targetIndex, 82n)?
                          index82 :
                          this.#_equal_83(targetIndex, 83n)?
                          index83 :
                          this.#_equal_84(targetIndex, 84n)?
                          index84 :
                          this.#_equal_85(targetIndex, 85n)?
                          index85 :
                          this.#_equal_86(targetIndex, 86n)?
                          index86 :
                          this.#_equal_87(targetIndex, 87n)?
                          index87 :
                          this.#_equal_88(targetIndex, 88n)?
                          index88 :
                          this.#_equal_89(targetIndex, 89n)?
                          index89 :
                          this.#_equal_90(targetIndex, 90n)?
                          index90 :
                          this.#_equal_91(targetIndex, 91n)?
                          index91 :
                          this.#_equal_92(targetIndex, 92n)?
                          index92 :
                          this.#_equal_93(targetIndex, 93n)?
                          index93 :
                          this.#_equal_94(targetIndex, 94n)?
                          index94 :
                          this.#_equal_95(targetIndex, 95n)?
                          index95 :
                          this.#_equal_96(targetIndex, 96n)?
                          index96 :
                          this.#_equal_97(targetIndex, 97n)?
                          index97 :
                          this.#_equal_98(targetIndex, 98n)?
                          index98 :
                          this.#_equal_99(targetIndex, 99n)? index99 : index100;
    const mappedResult = this.#_mapper_0(context,
                                         partialProofData,
                                         ((context, partialProofData, x, y) =>
                                          {
                                            return x * y;
                                          }),
                                         privateVector,
                                         selectedIndex);
    const totalSum = this.#_folder_1(context,
                                     partialProofData,
                                     ((context, partialProofData, acc, x_0) =>
                                      {
                                        return acc + x_0;
                                      }),
                                     0n,
                                     mappedResult);
    const hasShip = totalSum === 1n && true; return hasShip;
  }
  #_local_sk_0(context, partialProofData) {
    const witnessContext = __compactRuntime.witnessContext(ledger(context.transactionContext.state), context.currentPrivateState, context.transactionContext.address);
    const [nextPrivateState, result] = this.witnesses.local_sk(witnessContext);
    context.currentPrivateState = nextPrivateState;
    if (!(result.buffer instanceof ArrayBuffer && result.BYTES_PER_ELEMENT === 1 && result.length === 32))
      __compactRuntime.type_error('local_sk',
                                  'return value',
                                  './src/naval-battle-game.compact line 9, char 1',
                                  'Bytes<32>',
                                  result)
    partialProofData.privateTranscriptOutputs.push({
      value: _descriptor_2.toValue(result),
      alignment: _descriptor_2.alignment()
    });
    return result;
  }
  #_local_gameplay_0(context, partialProofData) {
    const witnessContext = __compactRuntime.witnessContext(ledger(context.transactionContext.state), context.currentPrivateState, context.transactionContext.address);
    const [nextPrivateState, result] = this.witnesses.local_gameplay(witnessContext);
    context.currentPrivateState = nextPrivateState;
    if (!(Array.isArray(result) && result.length === 100 && result.every((t) => typeof(t) === 'bigint' && t >= 0 && t <= 1n)))
      __compactRuntime.type_error('local_gameplay',
                                  'return value',
                                  './src/naval-battle-game.compact line 11, char 1',
                                  'Vector<100, Uint<0..1>>',
                                  result)
    partialProofData.privateTranscriptOutputs.push({
      value: _descriptor_1.toValue(result),
      alignment: _descriptor_1.alignment()
    });
    return result;
  }
  #_set_local_gameplay_0(context, partialProofData, playerSetup) {
    const witnessContext = __compactRuntime.witnessContext(ledger(context.transactionContext.state), context.currentPrivateState, context.transactionContext.address);
    const [nextPrivateState, result] = this.witnesses.set_local_gameplay(witnessContext,
                                                                         playerSetup);
    context.currentPrivateState = nextPrivateState;
    if (!(result.buffer instanceof ArrayBuffer && result.BYTES_PER_ELEMENT === 1 && result.length === 32))
      __compactRuntime.type_error('set_local_gameplay',
                                  'return value',
                                  './src/naval-battle-game.compact line 12, char 1',
                                  'Bytes<32>',
                                  result)
    partialProofData.privateTranscriptOutputs.push({
      value: _descriptor_2.toValue(result),
      alignment: _descriptor_2.alignment()
    });
    return result;
  }
  #_joinGame_0(context, partialProofData, player) {
    __compactRuntime.assert(_descriptor_6.fromValue(Contract._query(context,
                                                                    partialProofData,
                                                                    [
                                                                     { dup: { n: 0 } },
                                                                     { idx: { cached: false,
                                                                              pushPath: false,
                                                                              path: [
                                                                                     { tag: 'value',
                                                                                       value: { value: _descriptor_11.toValue(0n),
                                                                                                alignment: _descriptor_11.alignment() } },
                                                                                     { tag: 'value',
                                                                                       value: { value: _descriptor_11.toValue(0n),
                                                                                                alignment: _descriptor_11.alignment() } }
                                                                                    ] } },
                                                                     { popeq: { cached: false,
                                                                                result: undefined } }
                                                                    ]).value)
                            ===
                            false,
                            'Game has already started');
    let tmp;
    __compactRuntime.assert((tmp = 2n,
                             _descriptor_6.fromValue(Contract._query(context,
                                                                     partialProofData,
                                                                     [
                                                                      { dup: { n: 0 } },
                                                                      { idx: { cached: false,
                                                                               pushPath: false,
                                                                               path: [
                                                                                      { tag: 'value',
                                                                                        value: { value: _descriptor_11.toValue(0n),
                                                                                                 alignment: _descriptor_11.alignment() } },
                                                                                      { tag: 'value',
                                                                                        value: { value: _descriptor_11.toValue(1n),
                                                                                                 alignment: _descriptor_11.alignment() } }
                                                                                     ] } },
                                                                      { push: { storage: false,
                                                                                value: __compactRuntime.StateValue.newCell({ value: _descriptor_7.toValue(tmp),
                                                                                                                             alignment: _descriptor_7.alignment() }).encode() } },
                                                                      'lt',
                                                                      { popeq: { cached: true,
                                                                                 result: undefined } }
                                                                     ]).value)),
                            'Game is designed for two players');
    __compactRuntime.assert(!this.#_equal_100(_descriptor_2.fromValue(Contract._query(context,
                                                                                      partialProofData,
                                                                                      [
                                                                                       { dup: { n: 0 } },
                                                                                       { idx: { cached: false,
                                                                                                pushPath: false,
                                                                                                path: [
                                                                                                       { tag: 'value',
                                                                                                         value: { value: _descriptor_11.toValue(0n),
                                                                                                                  alignment: _descriptor_11.alignment() } },
                                                                                                       { tag: 'value',
                                                                                                         value: { value: _descriptor_11.toValue(2n),
                                                                                                                  alignment: _descriptor_11.alignment() } }
                                                                                                      ] } },
                                                                                       { popeq: { cached: false,
                                                                                                  result: undefined } }
                                                                                      ]).value),
                                              player),
                            'Player one cannot join the game twice');
    Contract._query(context,
                    partialProofData,
                    [
                     { idx: { cached: false,
                              pushPath: true,
                              path: [
                                     { tag: 'value',
                                       value: { value: _descriptor_11.toValue(1n),
                                                alignment: _descriptor_11.alignment() } }
                                    ] } },
                     { push: { storage: false,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_11.toValue(6n),
                                                                            alignment: _descriptor_11.alignment() }).encode() } },
                     { push: { storage: true,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_2.toValue(player),
                                                                            alignment: _descriptor_2.alignment() }).encode() } },
                     { ins: { cached: false, n: 1 } },
                     { ins: { cached: true, n: 1 } }
                    ]);
    Contract._query(context,
                    partialProofData,
                    [
                     { idx: { cached: false,
                              pushPath: true,
                              path: [
                                     { tag: 'value',
                                       value: { value: _descriptor_11.toValue(1n),
                                                alignment: _descriptor_11.alignment() } }
                                    ] } },
                     { push: { storage: false,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_11.toValue(11n),
                                                                            alignment: _descriptor_11.alignment() }).encode() } },
                     { push: { storage: true,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_6.toValue(true),
                                                                            alignment: _descriptor_6.alignment() }).encode() } },
                     { ins: { cached: false, n: 1 } },
                     { ins: { cached: true, n: 1 } }
                    ]);
    Contract._query(context,
                    partialProofData,
                    [
                     { idx: { cached: false,
                              pushPath: true,
                              path: [
                                     { tag: 'value',
                                       value: { value: _descriptor_11.toValue(1n),
                                                alignment: _descriptor_11.alignment() } }
                                    ] } },
                     { push: { storage: false,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_11.toValue(12n),
                                                                            alignment: _descriptor_11.alignment() }).encode() } },
                     { push: { storage: true,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_6.toValue(false),
                                                                            alignment: _descriptor_6.alignment() }).encode() } },
                     { ins: { cached: false, n: 1 } },
                     { ins: { cached: true, n: 1 } }
                    ]);
    const tmp_0 = 1n;
    Contract._query(context,
                    partialProofData,
                    [
                     { idx: { cached: false,
                              pushPath: true,
                              path: [
                                     { tag: 'value',
                                       value: { value: _descriptor_11.toValue(0n),
                                                alignment: _descriptor_11.alignment() } },
                                     { tag: 'value',
                                       value: { value: _descriptor_11.toValue(1n),
                                                alignment: _descriptor_11.alignment() } }
                                    ] } },
                     { addi: { immediate: parseInt(__compactRuntime.valueToBigInt(
                                            { value: _descriptor_8.toValue(tmp_0),
                                              alignment: _descriptor_8.alignment() }
                                              .value
                                          )) } },
                     { ins: { cached: true, n: 2 } }
                    ]);
  }
  #_commitGrid_0(context, partialProofData, player, playerSetup) {
    __compactRuntime.assert(_descriptor_6.fromValue(Contract._query(context,
                                                                    partialProofData,
                                                                    [
                                                                     { dup: { n: 0 } },
                                                                     { idx: { cached: false,
                                                                              pushPath: false,
                                                                              path: [
                                                                                     { tag: 'value',
                                                                                       value: { value: _descriptor_11.toValue(0n),
                                                                                                alignment: _descriptor_11.alignment() } },
                                                                                     { tag: 'value',
                                                                                       value: { value: _descriptor_11.toValue(0n),
                                                                                                alignment: _descriptor_11.alignment() } }
                                                                                    ] } },
                                                                     { popeq: { cached: false,
                                                                                result: undefined } }
                                                                    ]).value)
                            ===
                            false,
                            'Game has already started');
    const numberOfShips = this.#_folder_2(context,
                                          partialProofData,
                                          ((context, partialProofData, acc, x) =>
                                           {
                                             return acc + x;
                                           }),
                                          0n,
                                          playerSetup);
    __compactRuntime.assert(numberOfShips === 16n,
                            'Player has not placed 16 ships');
    if (this.#_equal_101(player,
                         _descriptor_2.fromValue(Contract._query(context,
                                                                 partialProofData,
                                                                 [
                                                                  { dup: { n: 0 } },
                                                                  { idx: { cached: false,
                                                                           pushPath: false,
                                                                           path: [
                                                                                  { tag: 'value',
                                                                                    value: { value: _descriptor_11.toValue(0n),
                                                                                             alignment: _descriptor_11.alignment() } },
                                                                                  { tag: 'value',
                                                                                    value: { value: _descriptor_11.toValue(2n),
                                                                                             alignment: _descriptor_11.alignment() } }
                                                                                 ] } },
                                                                  { popeq: { cached: false,
                                                                             result: undefined } }
                                                                 ]).value)))
    {
      __compactRuntime.assert(_descriptor_6.fromValue(Contract._query(context,
                                                                      partialProofData,
                                                                      [
                                                                       { dup: { n: 0 } },
                                                                       { idx: { cached: false,
                                                                                pushPath: false,
                                                                                path: [
                                                                                       { tag: 'value',
                                                                                         value: { value: _descriptor_11.toValue(1n),
                                                                                                  alignment: _descriptor_11.alignment() } },
                                                                                       { tag: 'value',
                                                                                         value: { value: _descriptor_11.toValue(2n),
                                                                                                  alignment: _descriptor_11.alignment() } }
                                                                                      ] } },
                                                                       { popeq: { cached: false,
                                                                                  result: undefined } }
                                                                      ]).value)
                              ===
                              true,
                              'Player one has not joined the game');
      __compactRuntime.assert(_descriptor_6.fromValue(Contract._query(context,
                                                                      partialProofData,
                                                                      [
                                                                       { dup: { n: 0 } },
                                                                       { idx: { cached: false,
                                                                                pushPath: false,
                                                                                path: [
                                                                                       { tag: 'value',
                                                                                         value: { value: _descriptor_11.toValue(1n),
                                                                                                  alignment: _descriptor_11.alignment() } },
                                                                                       { tag: 'value',
                                                                                         value: { value: _descriptor_11.toValue(1n),
                                                                                                  alignment: _descriptor_11.alignment() } }
                                                                                      ] } },
                                                                       { popeq: { cached: false,
                                                                                  result: undefined } }
                                                                      ]).value)
                              ===
                              false,
                              'Player one has already committed');
      __compactRuntime.assert(this.#_equal_102(_descriptor_2.fromValue(Contract._query(context,
                                                                                       partialProofData,
                                                                                       [
                                                                                        { dup: { n: 0 } },
                                                                                        { idx: { cached: false,
                                                                                                 pushPath: false,
                                                                                                 path: [
                                                                                                        { tag: 'value',
                                                                                                          value: { value: _descriptor_11.toValue(0n),
                                                                                                                   alignment: _descriptor_11.alignment() } },
                                                                                                        { tag: 'value',
                                                                                                          value: { value: _descriptor_11.toValue(2n),
                                                                                                                   alignment: _descriptor_11.alignment() } }
                                                                                                       ] } },
                                                                                        { popeq: { cached: false,
                                                                                                   result: undefined } }
                                                                                       ]).value),
                                               this.#_public_key_0(context,
                                                                   partialProofData,
                                                                   this.#_local_sk_0(context,
                                                                                     partialProofData))),
                              'PlayerOne confirmation failed');
      const commit = this.#_set_local_gameplay_0(context,
                                                 partialProofData,
                                                 playerSetup);
      Contract._query(context,
                      partialProofData,
                      [
                       { idx: { cached: false,
                                pushPath: true,
                                path: [
                                       { tag: 'value',
                                         value: { value: _descriptor_11.toValue(0n),
                                                  alignment: _descriptor_11.alignment() } }
                                      ] } },
                       { push: { storage: false,
                                 value: __compactRuntime.StateValue.newCell({ value: _descriptor_11.toValue(4n),
                                                                              alignment: _descriptor_11.alignment() }).encode() } },
                       { push: { storage: true,
                                 value: __compactRuntime.StateValue.newCell({ value: _descriptor_2.toValue(commit),
                                                                              alignment: _descriptor_2.alignment() }).encode() } },
                       { ins: { cached: false, n: 1 } },
                       { ins: { cached: true, n: 1 } }
                      ]);
      Contract._query(context,
                      partialProofData,
                      [
                       { idx: { cached: false,
                                pushPath: true,
                                path: [
                                       { tag: 'value',
                                         value: { value: _descriptor_11.toValue(1n),
                                                  alignment: _descriptor_11.alignment() } }
                                      ] } },
                       { push: { storage: false,
                                 value: __compactRuntime.StateValue.newCell({ value: _descriptor_11.toValue(1n),
                                                                              alignment: _descriptor_11.alignment() }).encode() } },
                       { push: { storage: true,
                                 value: __compactRuntime.StateValue.newCell({ value: _descriptor_6.toValue(true),
                                                                              alignment: _descriptor_6.alignment() }).encode() } },
                       { ins: { cached: false, n: 1 } },
                       { ins: { cached: true, n: 1 } }
                      ]);
    } else {
      __compactRuntime.assert(this.#_equal_103(player,
                                               _descriptor_2.fromValue(Contract._query(context,
                                                                                       partialProofData,
                                                                                       [
                                                                                        { dup: { n: 0 } },
                                                                                        { idx: { cached: false,
                                                                                                 pushPath: false,
                                                                                                 path: [
                                                                                                        { tag: 'value',
                                                                                                          value: { value: _descriptor_11.toValue(1n),
                                                                                                                   alignment: _descriptor_11.alignment() } },
                                                                                                        { tag: 'value',
                                                                                                          value: { value: _descriptor_11.toValue(6n),
                                                                                                                   alignment: _descriptor_11.alignment() } }
                                                                                                       ] } },
                                                                                        { popeq: { cached: false,
                                                                                                   result: undefined } }
                                                                                       ]).value)),
                              'You are not player two');
      __compactRuntime.assert(_descriptor_6.fromValue(Contract._query(context,
                                                                      partialProofData,
                                                                      [
                                                                       { dup: { n: 0 } },
                                                                       { idx: { cached: false,
                                                                                pushPath: false,
                                                                                path: [
                                                                                       { tag: 'value',
                                                                                         value: { value: _descriptor_11.toValue(1n),
                                                                                                  alignment: _descriptor_11.alignment() } },
                                                                                       { tag: 'value',
                                                                                         value: { value: _descriptor_11.toValue(11n),
                                                                                                  alignment: _descriptor_11.alignment() } }
                                                                                      ] } },
                                                                       { popeq: { cached: false,
                                                                                  result: undefined } }
                                                                      ]).value)
                              ===
                              true,
                              'Player two has not joined the game');
      __compactRuntime.assert(_descriptor_6.fromValue(Contract._query(context,
                                                                      partialProofData,
                                                                      [
                                                                       { dup: { n: 0 } },
                                                                       { idx: { cached: false,
                                                                                pushPath: false,
                                                                                path: [
                                                                                       { tag: 'value',
                                                                                         value: { value: _descriptor_11.toValue(1n),
                                                                                                  alignment: _descriptor_11.alignment() } },
                                                                                       { tag: 'value',
                                                                                         value: { value: _descriptor_11.toValue(10n),
                                                                                                  alignment: _descriptor_11.alignment() } }
                                                                                      ] } },
                                                                       { popeq: { cached: false,
                                                                                  result: undefined } }
                                                                      ]).value)
                              ===
                              false,
                              'Player two has already committed');
      __compactRuntime.assert(this.#_equal_104(_descriptor_2.fromValue(Contract._query(context,
                                                                                       partialProofData,
                                                                                       [
                                                                                        { dup: { n: 0 } },
                                                                                        { idx: { cached: false,
                                                                                                 pushPath: false,
                                                                                                 path: [
                                                                                                        { tag: 'value',
                                                                                                          value: { value: _descriptor_11.toValue(1n),
                                                                                                                   alignment: _descriptor_11.alignment() } },
                                                                                                        { tag: 'value',
                                                                                                          value: { value: _descriptor_11.toValue(6n),
                                                                                                                   alignment: _descriptor_11.alignment() } }
                                                                                                       ] } },
                                                                                        { popeq: { cached: false,
                                                                                                   result: undefined } }
                                                                                       ]).value),
                                               this.#_public_key_0(context,
                                                                   partialProofData,
                                                                   this.#_local_sk_0(context,
                                                                                     partialProofData))),
                              'PlayerTwo confirmation failed');
      const commit_0 = this.#_set_local_gameplay_0(context,
                                                   partialProofData,
                                                   playerSetup);
      Contract._query(context,
                      partialProofData,
                      [
                       { idx: { cached: false,
                                pushPath: true,
                                path: [
                                       { tag: 'value',
                                         value: { value: _descriptor_11.toValue(1n),
                                                  alignment: _descriptor_11.alignment() } }
                                      ] } },
                       { push: { storage: false,
                                 value: __compactRuntime.StateValue.newCell({ value: _descriptor_11.toValue(8n),
                                                                              alignment: _descriptor_11.alignment() }).encode() } },
                       { push: { storage: true,
                                 value: __compactRuntime.StateValue.newCell({ value: _descriptor_2.toValue(commit_0),
                                                                              alignment: _descriptor_2.alignment() }).encode() } },
                       { ins: { cached: false, n: 1 } },
                       { ins: { cached: true, n: 1 } }
                      ]);
      Contract._query(context,
                      partialProofData,
                      [
                       { idx: { cached: false,
                                pushPath: true,
                                path: [
                                       { tag: 'value',
                                         value: { value: _descriptor_11.toValue(1n),
                                                  alignment: _descriptor_11.alignment() } }
                                      ] } },
                       { push: { storage: false,
                                 value: __compactRuntime.StateValue.newCell({ value: _descriptor_11.toValue(10n),
                                                                              alignment: _descriptor_11.alignment() }).encode() } },
                       { push: { storage: true,
                                 value: __compactRuntime.StateValue.newCell({ value: _descriptor_6.toValue(true),
                                                                              alignment: _descriptor_6.alignment() }).encode() } },
                       { ins: { cached: false, n: 1 } },
                       { ins: { cached: true, n: 1 } }
                      ]);
    }
  }
  #_startGame_0(context, partialProofData) {
    __compactRuntime.assert(_descriptor_6.fromValue(Contract._query(context,
                                                                    partialProofData,
                                                                    [
                                                                     { dup: { n: 0 } },
                                                                     { idx: { cached: false,
                                                                              pushPath: false,
                                                                              path: [
                                                                                     { tag: 'value',
                                                                                       value: { value: _descriptor_11.toValue(0n),
                                                                                                alignment: _descriptor_11.alignment() } },
                                                                                     { tag: 'value',
                                                                                       value: { value: _descriptor_11.toValue(0n),
                                                                                                alignment: _descriptor_11.alignment() } }
                                                                                    ] } },
                                                                     { popeq: { cached: false,
                                                                                result: undefined } }
                                                                    ]).value)
                            ===
                            false,
                            'Game has already started');
    __compactRuntime.assert(this.#_equal_105(_descriptor_7.fromValue(Contract._query(context,
                                                                                     partialProofData,
                                                                                     [
                                                                                      { dup: { n: 0 } },
                                                                                      { idx: { cached: false,
                                                                                               pushPath: false,
                                                                                               path: [
                                                                                                      { tag: 'value',
                                                                                                        value: { value: _descriptor_11.toValue(0n),
                                                                                                                 alignment: _descriptor_11.alignment() } },
                                                                                                      { tag: 'value',
                                                                                                        value: { value: _descriptor_11.toValue(1n),
                                                                                                                 alignment: _descriptor_11.alignment() } }
                                                                                                     ] } },
                                                                                      { popeq: { cached: true,
                                                                                                 result: undefined } }
                                                                                     ]).value),
                                             2n),
                            'Game is designed for two players');
    __compactRuntime.assert(_descriptor_6.fromValue(Contract._query(context,
                                                                    partialProofData,
                                                                    [
                                                                     { dup: { n: 0 } },
                                                                     { idx: { cached: false,
                                                                              pushPath: false,
                                                                              path: [
                                                                                     { tag: 'value',
                                                                                       value: { value: _descriptor_11.toValue(1n),
                                                                                                alignment: _descriptor_11.alignment() } },
                                                                                     { tag: 'value',
                                                                                       value: { value: _descriptor_11.toValue(1n),
                                                                                                alignment: _descriptor_11.alignment() } }
                                                                                    ] } },
                                                                     { popeq: { cached: false,
                                                                                result: undefined } }
                                                                    ]).value)
                            ===
                            true,
                            'Player one has not committed');
    __compactRuntime.assert(_descriptor_6.fromValue(Contract._query(context,
                                                                    partialProofData,
                                                                    [
                                                                     { dup: { n: 0 } },
                                                                     { idx: { cached: false,
                                                                              pushPath: false,
                                                                              path: [
                                                                                     { tag: 'value',
                                                                                       value: { value: _descriptor_11.toValue(1n),
                                                                                                alignment: _descriptor_11.alignment() } },
                                                                                     { tag: 'value',
                                                                                       value: { value: _descriptor_11.toValue(10n),
                                                                                                alignment: _descriptor_11.alignment() } }
                                                                                    ] } },
                                                                     { popeq: { cached: false,
                                                                                result: undefined } }
                                                                    ]).value)
                            ===
                            true,
                            'Player two has not committed');
    __compactRuntime.assert(_descriptor_6.fromValue(Contract._query(context,
                                                                    partialProofData,
                                                                    [
                                                                     { dup: { n: 0 } },
                                                                     { idx: { cached: false,
                                                                              pushPath: false,
                                                                              path: [
                                                                                     { tag: 'value',
                                                                                       value: { value: _descriptor_11.toValue(1n),
                                                                                                alignment: _descriptor_11.alignment() } },
                                                                                     { tag: 'value',
                                                                                       value: { value: _descriptor_11.toValue(2n),
                                                                                                alignment: _descriptor_11.alignment() } }
                                                                                    ] } },
                                                                     { popeq: { cached: false,
                                                                                result: undefined } }
                                                                    ]).value)
                            ===
                            true,
                            'Player one has not joined the game');
    __compactRuntime.assert(_descriptor_6.fromValue(Contract._query(context,
                                                                    partialProofData,
                                                                    [
                                                                     { dup: { n: 0 } },
                                                                     { idx: { cached: false,
                                                                              pushPath: false,
                                                                              path: [
                                                                                     { tag: 'value',
                                                                                       value: { value: _descriptor_11.toValue(1n),
                                                                                                alignment: _descriptor_11.alignment() } },
                                                                                     { tag: 'value',
                                                                                       value: { value: _descriptor_11.toValue(11n),
                                                                                                alignment: _descriptor_11.alignment() } }
                                                                                    ] } },
                                                                     { popeq: { cached: false,
                                                                                result: undefined } }
                                                                    ]).value)
                            ===
                            true,
                            'Player two has not joined the game');
    Contract._query(context,
                    partialProofData,
                    [
                     { idx: { cached: false,
                              pushPath: true,
                              path: [
                                     { tag: 'value',
                                       value: { value: _descriptor_11.toValue(0n),
                                                alignment: _descriptor_11.alignment() } }
                                    ] } },
                     { push: { storage: false,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_11.toValue(0n),
                                                                            alignment: _descriptor_11.alignment() }).encode() } },
                     { push: { storage: true,
                               value: __compactRuntime.StateValue.newCell({ value: _descriptor_6.toValue(true),
                                                                            alignment: _descriptor_6.alignment() }).encode() } },
                     { ins: { cached: false, n: 1 } },
                     { ins: { cached: true, n: 1 } }
                    ]);
  }
  #_makeMove_0(context, partialProofData, player, move) {
    __compactRuntime.assert(_descriptor_6.fromValue(Contract._query(context,
                                                                    partialProofData,
                                                                    [
                                                                     { dup: { n: 0 } },
                                                                     { idx: { cached: false,
                                                                              pushPath: false,
                                                                              path: [
                                                                                     { tag: 'value',
                                                                                       value: { value: _descriptor_11.toValue(0n),
                                                                                                alignment: _descriptor_11.alignment() } },
                                                                                     { tag: 'value',
                                                                                       value: { value: _descriptor_11.toValue(0n),
                                                                                                alignment: _descriptor_11.alignment() } }
                                                                                    ] } },
                                                                     { popeq: { cached: false,
                                                                                result: undefined } }
                                                                    ]).value)
                            ===
                            true,
                            'Game has not started');
    __compactRuntime.assert(_descriptor_6.fromValue(Contract._query(context,
                                                                    partialProofData,
                                                                    [
                                                                     { dup: { n: 0 } },
                                                                     { idx: { cached: false,
                                                                              pushPath: false,
                                                                              path: [
                                                                                     { tag: 'value',
                                                                                       value: { value: _descriptor_11.toValue(1n),
                                                                                                alignment: _descriptor_11.alignment() } },
                                                                                     { tag: 'value',
                                                                                       value: { value: _descriptor_11.toValue(14n),
                                                                                                alignment: _descriptor_11.alignment() } }
                                                                                    ] } },
                                                                     { popeq: { cached: false,
                                                                                result: undefined } }
                                                                    ]).value)
                            ===
                            false,
                            'Game has a winner');
    __compactRuntime.assert(_descriptor_6.fromValue(Contract._query(context,
                                                                    partialProofData,
                                                                    [
                                                                     { dup: { n: 0 } },
                                                                     { idx: { cached: false,
                                                                              pushPath: false,
                                                                              path: [
                                                                                     { tag: 'value',
                                                                                       value: { value: _descriptor_11.toValue(1n),
                                                                                                alignment: _descriptor_11.alignment() } },
                                                                                     { tag: 'value',
                                                                                       value: { value: _descriptor_11.toValue(5n),
                                                                                                alignment: _descriptor_11.alignment() } }
                                                                                    ] } },
                                                                     { popeq: { cached: false,
                                                                                result: undefined } }
                                                                    ]).value)
                            ===
                            false,
                            'Game has a winner');
    if (this.#_equal_106(player,
                         _descriptor_2.fromValue(Contract._query(context,
                                                                 partialProofData,
                                                                 [
                                                                  { dup: { n: 0 } },
                                                                  { idx: { cached: false,
                                                                           pushPath: false,
                                                                           path: [
                                                                                  { tag: 'value',
                                                                                    value: { value: _descriptor_11.toValue(0n),
                                                                                             alignment: _descriptor_11.alignment() } },
                                                                                  { tag: 'value',
                                                                                    value: { value: _descriptor_11.toValue(2n),
                                                                                             alignment: _descriptor_11.alignment() } }
                                                                                 ] } },
                                                                  { popeq: { cached: false,
                                                                             result: undefined } }
                                                                 ]).value)))
    {
      __compactRuntime.assert(_descriptor_6.fromValue(Contract._query(context,
                                                                      partialProofData,
                                                                      [
                                                                       { dup: { n: 0 } },
                                                                       { idx: { cached: false,
                                                                                pushPath: false,
                                                                                path: [
                                                                                       { tag: 'value',
                                                                                         value: { value: _descriptor_11.toValue(1n),
                                                                                                  alignment: _descriptor_11.alignment() } },
                                                                                       { tag: 'value',
                                                                                         value: { value: _descriptor_11.toValue(3n),
                                                                                                  alignment: _descriptor_11.alignment() } }
                                                                                      ] } },
                                                                       { popeq: { cached: false,
                                                                                  result: undefined } }
                                                                      ]).value)
                              ===
                              true,
                              "It is not player one's turn");
      __compactRuntime.assert(this.#_equal_107(_descriptor_2.fromValue(Contract._query(context,
                                                                                       partialProofData,
                                                                                       [
                                                                                        { dup: { n: 0 } },
                                                                                        { idx: { cached: false,
                                                                                                 pushPath: false,
                                                                                                 path: [
                                                                                                        { tag: 'value',
                                                                                                          value: { value: _descriptor_11.toValue(0n),
                                                                                                                   alignment: _descriptor_11.alignment() } },
                                                                                                        { tag: 'value',
                                                                                                          value: { value: _descriptor_11.toValue(2n),
                                                                                                                   alignment: _descriptor_11.alignment() } }
                                                                                                       ] } },
                                                                                        { popeq: { cached: false,
                                                                                                   result: undefined } }
                                                                                       ]).value),
                                               this.#_public_key_0(context,
                                                                   partialProofData,
                                                                   this.#_local_sk_0(context,
                                                                                     partialProofData))),
                              'You are not player one');
      let tmp;
      __compactRuntime.assert((tmp = move,
                               _descriptor_4.fromValue(Contract._query(context,
                                                                       partialProofData,
                                                                       [
                                                                        { dup: { n: 0 } },
                                                                        { idx: { cached: false,
                                                                                 pushPath: false,
                                                                                 path: [
                                                                                        { tag: 'value',
                                                                                          value: { value: _descriptor_11.toValue(1n),
                                                                                                   alignment: _descriptor_11.alignment() } },
                                                                                        { tag: 'value',
                                                                                          value: { value: _descriptor_11.toValue(7n),
                                                                                                   alignment: _descriptor_11.alignment() } }
                                                                                       ] } },
                                                                        { idx: { cached: false,
                                                                                 pushPath: false,
                                                                                 path: [
                                                                                        { tag: 'value',
                                                                                          value: { value: _descriptor_3.toValue(tmp),
                                                                                                   alignment: _descriptor_3.alignment() } }
                                                                                       ] } },
                                                                        { popeq: { cached: false,
                                                                                   result: undefined } }
                                                                       ]).value))
                              ===
                              0,
                              'Cell has already been played');
      Contract._query(context,
                      partialProofData,
                      [
                       { idx: { cached: false,
                                pushPath: true,
                                path: [
                                       { tag: 'value',
                                         value: { value: _descriptor_11.toValue(1n),
                                                  alignment: _descriptor_11.alignment() } }
                                      ] } },
                       { push: { storage: false,
                                 value: __compactRuntime.StateValue.newCell({ value: _descriptor_11.toValue(4n),
                                                                              alignment: _descriptor_11.alignment() }).encode() } },
                       { push: { storage: true,
                                 value: __compactRuntime.StateValue.newCell({ value: _descriptor_5.toValue(move),
                                                                              alignment: _descriptor_5.alignment() }).encode() } },
                       { ins: { cached: false, n: 1 } },
                       { ins: { cached: true, n: 1 } }
                      ]);
      __compactRuntime.assert(this.#_equal_108(this.#_vectorHash_0(context,
                                                                   partialProofData,
                                                                   this.#_local_gameplay_0(context,
                                                                                           partialProofData)),
                                               _descriptor_2.fromValue(Contract._query(context,
                                                                                       partialProofData,
                                                                                       [
                                                                                        { dup: { n: 0 } },
                                                                                        { idx: { cached: false,
                                                                                                 pushPath: false,
                                                                                                 path: [
                                                                                                        { tag: 'value',
                                                                                                          value: { value: _descriptor_11.toValue(0n),
                                                                                                                   alignment: _descriptor_11.alignment() } },
                                                                                                        { tag: 'value',
                                                                                                          value: { value: _descriptor_11.toValue(4n),
                                                                                                                   alignment: _descriptor_11.alignment() } }
                                                                                                       ] } },
                                                                                        { popeq: { cached: false,
                                                                                                   result: undefined } }
                                                                                       ]).value)),
                              'Player one has tampered with the grid');
      const privatePlay = this.#_local_gameplay_0(context, partialProofData);
      const wasHit = this.#_hasShip_0(context,
                                      partialProofData,
                                      privatePlay,
                                      _descriptor_5.fromValue(Contract._query(context,
                                                                              partialProofData,
                                                                              [
                                                                               { dup: { n: 0 } },
                                                                               { idx: { cached: false,
                                                                                        pushPath: false,
                                                                                        path: [
                                                                                               { tag: 'value',
                                                                                                 value: { value: _descriptor_11.toValue(1n),
                                                                                                          alignment: _descriptor_11.alignment() } },
                                                                                               { tag: 'value',
                                                                                                 value: { value: _descriptor_11.toValue(13n),
                                                                                                          alignment: _descriptor_11.alignment() } }
                                                                                              ] } },
                                                                               { popeq: { cached: false,
                                                                                          result: undefined } }
                                                                              ]).value));
      if (wasHit) {
        const tmp_0 = _descriptor_5.fromValue(Contract._query(context,
                                                              partialProofData,
                                                              [
                                                               { dup: { n: 0 } },
                                                               { idx: { cached: false,
                                                                        pushPath: false,
                                                                        path: [
                                                                               { tag: 'value',
                                                                                 value: { value: _descriptor_11.toValue(1n),
                                                                                          alignment: _descriptor_11.alignment() } },
                                                                               { tag: 'value',
                                                                                 value: { value: _descriptor_11.toValue(13n),
                                                                                          alignment: _descriptor_11.alignment() } }
                                                                              ] } },
                                                               { popeq: { cached: false,
                                                                          result: undefined } }
                                                              ]).value);
        Contract._query(context,
                        partialProofData,
                        [
                         { idx: { cached: false,
                                  pushPath: true,
                                  path: [
                                         { tag: 'value',
                                           value: { value: _descriptor_11.toValue(0n),
                                                    alignment: _descriptor_11.alignment() } },
                                         { tag: 'value',
                                           value: { value: _descriptor_11.toValue(3n),
                                                    alignment: _descriptor_11.alignment() } }
                                        ] } },
                         { push: { storage: false,
                                   value: __compactRuntime.StateValue.newCell({ value: _descriptor_3.toValue(tmp_0),
                                                                                alignment: _descriptor_3.alignment() }).encode() } },
                         { push: { storage: true,
                                   value: __compactRuntime.StateValue.newCell({ value: _descriptor_4.toValue(1),
                                                                                alignment: _descriptor_4.alignment() }).encode() } },
                         { ins: { cached: false, n: 1 } },
                         { ins: { cached: true, n: 2 } }
                        ]);
        if (this.#_equal_109(_descriptor_7.fromValue(Contract._query(context,
                                                                     partialProofData,
                                                                     [
                                                                      { dup: { n: 0 } },
                                                                      { idx: { cached: false,
                                                                               pushPath: false,
                                                                               path: [
                                                                                      { tag: 'value',
                                                                                        value: { value: _descriptor_11.toValue(1n),
                                                                                                 alignment: _descriptor_11.alignment() } },
                                                                                      { tag: 'value',
                                                                                        value: { value: _descriptor_11.toValue(9n),
                                                                                                 alignment: _descriptor_11.alignment() } }
                                                                                     ] } },
                                                                      { popeq: { cached: true,
                                                                                 result: undefined } }
                                                                     ]).value),
                             15n))
        {
          Contract._query(context,
                          partialProofData,
                          [
                           { idx: { cached: false,
                                    pushPath: true,
                                    path: [
                                           { tag: 'value',
                                             value: { value: _descriptor_11.toValue(1n),
                                                      alignment: _descriptor_11.alignment() } }
                                          ] } },
                           { push: { storage: false,
                                     value: __compactRuntime.StateValue.newCell({ value: _descriptor_11.toValue(14n),
                                                                                  alignment: _descriptor_11.alignment() }).encode() } },
                           { push: { storage: true,
                                     value: __compactRuntime.StateValue.newCell({ value: _descriptor_6.toValue(true),
                                                                                  alignment: _descriptor_6.alignment() }).encode() } },
                           { ins: { cached: false, n: 1 } },
                           { ins: { cached: true, n: 1 } }
                          ]);
        }
        const tmp_1 = 1n;
        Contract._query(context,
                        partialProofData,
                        [
                         { idx: { cached: false,
                                  pushPath: true,
                                  path: [
                                         { tag: 'value',
                                           value: { value: _descriptor_11.toValue(1n),
                                                    alignment: _descriptor_11.alignment() } },
                                         { tag: 'value',
                                           value: { value: _descriptor_11.toValue(9n),
                                                    alignment: _descriptor_11.alignment() } }
                                        ] } },
                         { addi: { immediate: parseInt(__compactRuntime.valueToBigInt(
                                                { value: _descriptor_8.toValue(tmp_1),
                                                  alignment: _descriptor_8.alignment() }
                                                  .value
                                              )) } },
                         { ins: { cached: true, n: 2 } }
                        ]);
      } else {
        const tmp_2 = _descriptor_5.fromValue(Contract._query(context,
                                                              partialProofData,
                                                              [
                                                               { dup: { n: 0 } },
                                                               { idx: { cached: false,
                                                                        pushPath: false,
                                                                        path: [
                                                                               { tag: 'value',
                                                                                 value: { value: _descriptor_11.toValue(1n),
                                                                                          alignment: _descriptor_11.alignment() } },
                                                                               { tag: 'value',
                                                                                 value: { value: _descriptor_11.toValue(13n),
                                                                                          alignment: _descriptor_11.alignment() } }
                                                                              ] } },
                                                               { popeq: { cached: false,
                                                                          result: undefined } }
                                                              ]).value);
        Contract._query(context,
                        partialProofData,
                        [
                         { idx: { cached: false,
                                  pushPath: true,
                                  path: [
                                         { tag: 'value',
                                           value: { value: _descriptor_11.toValue(0n),
                                                    alignment: _descriptor_11.alignment() } },
                                         { tag: 'value',
                                           value: { value: _descriptor_11.toValue(3n),
                                                    alignment: _descriptor_11.alignment() } }
                                        ] } },
                         { push: { storage: false,
                                   value: __compactRuntime.StateValue.newCell({ value: _descriptor_3.toValue(tmp_2),
                                                                                alignment: _descriptor_3.alignment() }).encode() } },
                         { push: { storage: true,
                                   value: __compactRuntime.StateValue.newCell({ value: _descriptor_4.toValue(2),
                                                                                alignment: _descriptor_4.alignment() }).encode() } },
                         { ins: { cached: false, n: 1 } },
                         { ins: { cached: true, n: 2 } }
                        ]);
      }
      Contract._query(context,
                      partialProofData,
                      [
                       { idx: { cached: false,
                                pushPath: true,
                                path: [
                                       { tag: 'value',
                                         value: { value: _descriptor_11.toValue(1n),
                                                  alignment: _descriptor_11.alignment() } }
                                      ] } },
                       { push: { storage: false,
                                 value: __compactRuntime.StateValue.newCell({ value: _descriptor_11.toValue(3n),
                                                                              alignment: _descriptor_11.alignment() }).encode() } },
                       { push: { storage: true,
                                 value: __compactRuntime.StateValue.newCell({ value: _descriptor_6.toValue(false),
                                                                              alignment: _descriptor_6.alignment() }).encode() } },
                       { ins: { cached: false, n: 1 } },
                       { ins: { cached: true, n: 1 } }
                      ]);
      Contract._query(context,
                      partialProofData,
                      [
                       { idx: { cached: false,
                                pushPath: true,
                                path: [
                                       { tag: 'value',
                                         value: { value: _descriptor_11.toValue(1n),
                                                  alignment: _descriptor_11.alignment() } }
                                      ] } },
                       { push: { storage: false,
                                 value: __compactRuntime.StateValue.newCell({ value: _descriptor_11.toValue(12n),
                                                                              alignment: _descriptor_11.alignment() }).encode() } },
                       { push: { storage: true,
                                 value: __compactRuntime.StateValue.newCell({ value: _descriptor_6.toValue(true),
                                                                              alignment: _descriptor_6.alignment() }).encode() } },
                       { ins: { cached: false, n: 1 } },
                       { ins: { cached: true, n: 1 } }
                      ]);
    }
    if (this.#_equal_110(player,
                         _descriptor_2.fromValue(Contract._query(context,
                                                                 partialProofData,
                                                                 [
                                                                  { dup: { n: 0 } },
                                                                  { idx: { cached: false,
                                                                           pushPath: false,
                                                                           path: [
                                                                                  { tag: 'value',
                                                                                    value: { value: _descriptor_11.toValue(1n),
                                                                                             alignment: _descriptor_11.alignment() } },
                                                                                  { tag: 'value',
                                                                                    value: { value: _descriptor_11.toValue(6n),
                                                                                             alignment: _descriptor_11.alignment() } }
                                                                                 ] } },
                                                                  { popeq: { cached: false,
                                                                             result: undefined } }
                                                                 ]).value)))
    {
      __compactRuntime.assert(_descriptor_6.fromValue(Contract._query(context,
                                                                      partialProofData,
                                                                      [
                                                                       { dup: { n: 0 } },
                                                                       { idx: { cached: false,
                                                                                pushPath: false,
                                                                                path: [
                                                                                       { tag: 'value',
                                                                                         value: { value: _descriptor_11.toValue(1n),
                                                                                                  alignment: _descriptor_11.alignment() } },
                                                                                       { tag: 'value',
                                                                                         value: { value: _descriptor_11.toValue(12n),
                                                                                                  alignment: _descriptor_11.alignment() } }
                                                                                      ] } },
                                                                       { popeq: { cached: false,
                                                                                  result: undefined } }
                                                                      ]).value)
                              ===
                              true,
                              "It is not player two's turn");
      __compactRuntime.assert(this.#_equal_111(_descriptor_2.fromValue(Contract._query(context,
                                                                                       partialProofData,
                                                                                       [
                                                                                        { dup: { n: 0 } },
                                                                                        { idx: { cached: false,
                                                                                                 pushPath: false,
                                                                                                 path: [
                                                                                                        { tag: 'value',
                                                                                                          value: { value: _descriptor_11.toValue(1n),
                                                                                                                   alignment: _descriptor_11.alignment() } },
                                                                                                        { tag: 'value',
                                                                                                          value: { value: _descriptor_11.toValue(6n),
                                                                                                                   alignment: _descriptor_11.alignment() } }
                                                                                                       ] } },
                                                                                        { popeq: { cached: false,
                                                                                                   result: undefined } }
                                                                                       ]).value),
                                               this.#_public_key_0(context,
                                                                   partialProofData,
                                                                   this.#_local_sk_0(context,
                                                                                     partialProofData))),
                              'You are not player two');
      let tmp_3;
      __compactRuntime.assert((tmp_3 = move,
                               _descriptor_4.fromValue(Contract._query(context,
                                                                       partialProofData,
                                                                       [
                                                                        { dup: { n: 0 } },
                                                                        { idx: { cached: false,
                                                                                 pushPath: false,
                                                                                 path: [
                                                                                        { tag: 'value',
                                                                                          value: { value: _descriptor_11.toValue(0n),
                                                                                                   alignment: _descriptor_11.alignment() } },
                                                                                        { tag: 'value',
                                                                                          value: { value: _descriptor_11.toValue(3n),
                                                                                                   alignment: _descriptor_11.alignment() } }
                                                                                       ] } },
                                                                        { idx: { cached: false,
                                                                                 pushPath: false,
                                                                                 path: [
                                                                                        { tag: 'value',
                                                                                          value: { value: _descriptor_3.toValue(tmp_3),
                                                                                                   alignment: _descriptor_3.alignment() } }
                                                                                       ] } },
                                                                        { popeq: { cached: false,
                                                                                   result: undefined } }
                                                                       ]).value))
                              ===
                              0,
                              'Cell has already been played');
      Contract._query(context,
                      partialProofData,
                      [
                       { idx: { cached: false,
                                pushPath: true,
                                path: [
                                       { tag: 'value',
                                         value: { value: _descriptor_11.toValue(1n),
                                                  alignment: _descriptor_11.alignment() } }
                                      ] } },
                       { push: { storage: false,
                                 value: __compactRuntime.StateValue.newCell({ value: _descriptor_11.toValue(13n),
                                                                              alignment: _descriptor_11.alignment() }).encode() } },
                       { push: { storage: true,
                                 value: __compactRuntime.StateValue.newCell({ value: _descriptor_5.toValue(move),
                                                                              alignment: _descriptor_5.alignment() }).encode() } },
                       { ins: { cached: false, n: 1 } },
                       { ins: { cached: true, n: 1 } }
                      ]);
      __compactRuntime.assert(this.#_equal_112(this.#_vectorHash_0(context,
                                                                   partialProofData,
                                                                   this.#_local_gameplay_0(context,
                                                                                           partialProofData)),
                                               _descriptor_2.fromValue(Contract._query(context,
                                                                                       partialProofData,
                                                                                       [
                                                                                        { dup: { n: 0 } },
                                                                                        { idx: { cached: false,
                                                                                                 pushPath: false,
                                                                                                 path: [
                                                                                                        { tag: 'value',
                                                                                                          value: { value: _descriptor_11.toValue(1n),
                                                                                                                   alignment: _descriptor_11.alignment() } },
                                                                                                        { tag: 'value',
                                                                                                          value: { value: _descriptor_11.toValue(8n),
                                                                                                                   alignment: _descriptor_11.alignment() } }
                                                                                                       ] } },
                                                                                        { popeq: { cached: false,
                                                                                                   result: undefined } }
                                                                                       ]).value)),
                              'Player two has tampered with the grid');
      const privatePlay_0 = this.#_local_gameplay_0(context, partialProofData);
      const wasHit_0 = this.#_hasShip_0(context,
                                        partialProofData,
                                        privatePlay_0,
                                        _descriptor_5.fromValue(Contract._query(context,
                                                                                partialProofData,
                                                                                [
                                                                                 { dup: { n: 0 } },
                                                                                 { idx: { cached: false,
                                                                                          pushPath: false,
                                                                                          path: [
                                                                                                 { tag: 'value',
                                                                                                   value: { value: _descriptor_11.toValue(1n),
                                                                                                            alignment: _descriptor_11.alignment() } },
                                                                                                 { tag: 'value',
                                                                                                   value: { value: _descriptor_11.toValue(4n),
                                                                                                            alignment: _descriptor_11.alignment() } }
                                                                                                ] } },
                                                                                 { popeq: { cached: false,
                                                                                            result: undefined } }
                                                                                ]).value));
      if (wasHit_0) {
        const tmp_4 = _descriptor_5.fromValue(Contract._query(context,
                                                              partialProofData,
                                                              [
                                                               { dup: { n: 0 } },
                                                               { idx: { cached: false,
                                                                        pushPath: false,
                                                                        path: [
                                                                               { tag: 'value',
                                                                                 value: { value: _descriptor_11.toValue(1n),
                                                                                          alignment: _descriptor_11.alignment() } },
                                                                               { tag: 'value',
                                                                                 value: { value: _descriptor_11.toValue(4n),
                                                                                          alignment: _descriptor_11.alignment() } }
                                                                              ] } },
                                                               { popeq: { cached: false,
                                                                          result: undefined } }
                                                              ]).value);
        Contract._query(context,
                        partialProofData,
                        [
                         { idx: { cached: false,
                                  pushPath: true,
                                  path: [
                                         { tag: 'value',
                                           value: { value: _descriptor_11.toValue(1n),
                                                    alignment: _descriptor_11.alignment() } },
                                         { tag: 'value',
                                           value: { value: _descriptor_11.toValue(7n),
                                                    alignment: _descriptor_11.alignment() } }
                                        ] } },
                         { push: { storage: false,
                                   value: __compactRuntime.StateValue.newCell({ value: _descriptor_3.toValue(tmp_4),
                                                                                alignment: _descriptor_3.alignment() }).encode() } },
                         { push: { storage: true,
                                   value: __compactRuntime.StateValue.newCell({ value: _descriptor_4.toValue(1),
                                                                                alignment: _descriptor_4.alignment() }).encode() } },
                         { ins: { cached: false, n: 1 } },
                         { ins: { cached: true, n: 2 } }
                        ]);
        if (this.#_equal_113(_descriptor_7.fromValue(Contract._query(context,
                                                                     partialProofData,
                                                                     [
                                                                      { dup: { n: 0 } },
                                                                      { idx: { cached: false,
                                                                               pushPath: false,
                                                                               path: [
                                                                                      { tag: 'value',
                                                                                        value: { value: _descriptor_11.toValue(1n),
                                                                                                 alignment: _descriptor_11.alignment() } },
                                                                                      { tag: 'value',
                                                                                        value: { value: _descriptor_11.toValue(0n),
                                                                                                 alignment: _descriptor_11.alignment() } }
                                                                                     ] } },
                                                                      { popeq: { cached: true,
                                                                                 result: undefined } }
                                                                     ]).value),
                             15n))
        {
          Contract._query(context,
                          partialProofData,
                          [
                           { idx: { cached: false,
                                    pushPath: true,
                                    path: [
                                           { tag: 'value',
                                             value: { value: _descriptor_11.toValue(1n),
                                                      alignment: _descriptor_11.alignment() } }
                                          ] } },
                           { push: { storage: false,
                                     value: __compactRuntime.StateValue.newCell({ value: _descriptor_11.toValue(5n),
                                                                                  alignment: _descriptor_11.alignment() }).encode() } },
                           { push: { storage: true,
                                     value: __compactRuntime.StateValue.newCell({ value: _descriptor_6.toValue(true),
                                                                                  alignment: _descriptor_6.alignment() }).encode() } },
                           { ins: { cached: false, n: 1 } },
                           { ins: { cached: true, n: 1 } }
                          ]);
        }
        const tmp_5 = 1n;
        Contract._query(context,
                        partialProofData,
                        [
                         { idx: { cached: false,
                                  pushPath: true,
                                  path: [
                                         { tag: 'value',
                                           value: { value: _descriptor_11.toValue(1n),
                                                    alignment: _descriptor_11.alignment() } },
                                         { tag: 'value',
                                           value: { value: _descriptor_11.toValue(0n),
                                                    alignment: _descriptor_11.alignment() } }
                                        ] } },
                         { addi: { immediate: parseInt(__compactRuntime.valueToBigInt(
                                                { value: _descriptor_8.toValue(tmp_5),
                                                  alignment: _descriptor_8.alignment() }
                                                  .value
                                              )) } },
                         { ins: { cached: true, n: 2 } }
                        ]);
      } else {
        const tmp_6 = _descriptor_5.fromValue(Contract._query(context,
                                                              partialProofData,
                                                              [
                                                               { dup: { n: 0 } },
                                                               { idx: { cached: false,
                                                                        pushPath: false,
                                                                        path: [
                                                                               { tag: 'value',
                                                                                 value: { value: _descriptor_11.toValue(1n),
                                                                                          alignment: _descriptor_11.alignment() } },
                                                                               { tag: 'value',
                                                                                 value: { value: _descriptor_11.toValue(4n),
                                                                                          alignment: _descriptor_11.alignment() } }
                                                                              ] } },
                                                               { popeq: { cached: false,
                                                                          result: undefined } }
                                                              ]).value);
        Contract._query(context,
                        partialProofData,
                        [
                         { idx: { cached: false,
                                  pushPath: true,
                                  path: [
                                         { tag: 'value',
                                           value: { value: _descriptor_11.toValue(1n),
                                                    alignment: _descriptor_11.alignment() } },
                                         { tag: 'value',
                                           value: { value: _descriptor_11.toValue(7n),
                                                    alignment: _descriptor_11.alignment() } }
                                        ] } },
                         { push: { storage: false,
                                   value: __compactRuntime.StateValue.newCell({ value: _descriptor_3.toValue(tmp_6),
                                                                                alignment: _descriptor_3.alignment() }).encode() } },
                         { push: { storage: true,
                                   value: __compactRuntime.StateValue.newCell({ value: _descriptor_4.toValue(2),
                                                                                alignment: _descriptor_4.alignment() }).encode() } },
                         { ins: { cached: false, n: 1 } },
                         { ins: { cached: true, n: 2 } }
                        ]);
      }
      Contract._query(context,
                      partialProofData,
                      [
                       { idx: { cached: false,
                                pushPath: true,
                                path: [
                                       { tag: 'value',
                                         value: { value: _descriptor_11.toValue(1n),
                                                  alignment: _descriptor_11.alignment() } }
                                      ] } },
                       { push: { storage: false,
                                 value: __compactRuntime.StateValue.newCell({ value: _descriptor_11.toValue(12n),
                                                                              alignment: _descriptor_11.alignment() }).encode() } },
                       { push: { storage: true,
                                 value: __compactRuntime.StateValue.newCell({ value: _descriptor_6.toValue(false),
                                                                              alignment: _descriptor_6.alignment() }).encode() } },
                       { ins: { cached: false, n: 1 } },
                       { ins: { cached: true, n: 1 } }
                      ]);
      Contract._query(context,
                      partialProofData,
                      [
                       { idx: { cached: false,
                                pushPath: true,
                                path: [
                                       { tag: 'value',
                                         value: { value: _descriptor_11.toValue(1n),
                                                  alignment: _descriptor_11.alignment() } }
                                      ] } },
                       { push: { storage: false,
                                 value: __compactRuntime.StateValue.newCell({ value: _descriptor_11.toValue(3n),
                                                                              alignment: _descriptor_11.alignment() }).encode() } },
                       { push: { storage: true,
                                 value: __compactRuntime.StateValue.newCell({ value: _descriptor_6.toValue(true),
                                                                              alignment: _descriptor_6.alignment() }).encode() } },
                       { ins: { cached: false, n: 1 } },
                       { ins: { cached: true, n: 1 } }
                      ]);
    }
  }
  #_public_key_0(context, partialProofData, sk) {
    return this.#_persistent_hash_0(context,
                                    partialProofData,
                                    [new Uint8Array([110, 97, 118, 97, 108, 45, 98, 97, 116, 116, 108, 101, 45, 103, 97, 109, 101, 58, 112, 107, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
                                     sk]);
  }
  #_vectorHash_0(context, partialProofData, sk) {
    return this.#_persistent_hash_1(context, partialProofData, sk);
  }
  #_folder_0(context, partialProofData, f, x, a0)
  {
    for (let i = 0; i < 100; i++) x = f(context, partialProofData, x, a0[i]);
    return x;
  }
  #_equal_0(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_1(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_2(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_3(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_4(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_5(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_6(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_7(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_8(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_9(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_10(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_11(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_12(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_13(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_14(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_15(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_16(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_17(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_18(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_19(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_20(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_21(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_22(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_23(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_24(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_25(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_26(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_27(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_28(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_29(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_30(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_31(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_32(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_33(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_34(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_35(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_36(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_37(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_38(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_39(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_40(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_41(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_42(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_43(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_44(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_45(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_46(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_47(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_48(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_49(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_50(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_51(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_52(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_53(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_54(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_55(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_56(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_57(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_58(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_59(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_60(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_61(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_62(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_63(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_64(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_65(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_66(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_67(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_68(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_69(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_70(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_71(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_72(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_73(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_74(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_75(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_76(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_77(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_78(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_79(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_80(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_81(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_82(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_83(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_84(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_85(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_86(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_87(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_88(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_89(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_90(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_91(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_92(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_93(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_94(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_95(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_96(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_97(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_98(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_99(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_mapper_0(context, partialProofData, f, a0, a1)
  {
    let a = [];
    for (let i = 0; i < 100; i++) a[i] = f(context, partialProofData, a0[i], a1[i]);
    return a;
  }
  #_folder_1(context, partialProofData, f, x, a0)
  {
    for (let i = 0; i < 100; i++) x = f(context, partialProofData, x, a0[i]);
    return x;
  }
  #_equal_100(x0, y0) {
    if (!x0.every((x, i) => y0[i] === x)) return false;
    return true;
  }
  #_folder_2(context, partialProofData, f, x, a0)
  {
    for (let i = 0; i < 100; i++) x = f(context, partialProofData, x, a0[i]);
    return x;
  }
  #_equal_101(x0, y0) {
    if (!x0.every((x, i) => y0[i] === x)) return false;
    return true;
  }
  #_equal_102(x0, y0) {
    if (!x0.every((x, i) => y0[i] === x)) return false;
    return true;
  }
  #_equal_103(x0, y0) {
    if (!x0.every((x, i) => y0[i] === x)) return false;
    return true;
  }
  #_equal_104(x0, y0) {
    if (!x0.every((x, i) => y0[i] === x)) return false;
    return true;
  }
  #_equal_105(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_106(x0, y0) {
    if (!x0.every((x, i) => y0[i] === x)) return false;
    return true;
  }
  #_equal_107(x0, y0) {
    if (!x0.every((x, i) => y0[i] === x)) return false;
    return true;
  }
  #_equal_108(x0, y0) {
    if (!x0.every((x, i) => y0[i] === x)) return false;
    return true;
  }
  #_equal_109(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  #_equal_110(x0, y0) {
    if (!x0.every((x, i) => y0[i] === x)) return false;
    return true;
  }
  #_equal_111(x0, y0) {
    if (!x0.every((x, i) => y0[i] === x)) return false;
    return true;
  }
  #_equal_112(x0, y0) {
    if (!x0.every((x, i) => y0[i] === x)) return false;
    return true;
  }
  #_equal_113(x0, y0) {
    if (x0 !== y0) return false;
    return true;
  }
  static _query(context, partialProofData, prog) {
    var res;
    try {
      res = context.transactionContext.query(prog, __compactRuntime.CostModel.dummyCostModel());
    } catch (err) {
      throw new __compactRuntime.CompactError(err.toString());
    }
    context.transactionContext = res.context;
    var reads = res.events.filter((e) => e.tag === 'read');
    var i = 0;
    partialProofData.publicTranscript = partialProofData.publicTranscript.concat(prog.map((op) => {
      if(typeof(op) === 'object' && 'popeq' in op) {
        return { popeq: {
          ...op.popeq,
          result: reads[i++].content,
        } };
      } else {
        return op;
      }
    }));
    if(res.events.length == 1 && res.events[0].tag === 'read') {
      return res.events[0].content;
    } else {
      return res.events;
    }
  }
}
function ledger(state) {
  const context = {
    originalState: state,
    transactionContext: new __compactRuntime.QueryContext(state, __compactRuntime.dummyContractAddress())
  };
  const partialProofData = {
    input: { value: [], alignment: [] },
    output: undefined,
    publicTranscript: [],
    privateTranscriptOutputs: []
  };
  return {
    get gameStarted() {
      return _descriptor_6.fromValue(Contract._query(context,
                                                     partialProofData,
                                                     [
                                                      { dup: { n: 0 } },
                                                      { idx: { cached: false,
                                                               pushPath: false,
                                                               path: [
                                                                      { tag: 'value',
                                                                        value: { value: _descriptor_11.toValue(0n),
                                                                                 alignment: _descriptor_11.alignment() } },
                                                                      { tag: 'value',
                                                                        value: { value: _descriptor_11.toValue(0n),
                                                                                 alignment: _descriptor_11.alignment() } }
                                                                     ] } },
                                                      { popeq: { cached: false,
                                                                 result: undefined } }
                                                     ]).value);
    },
    get players() {
      return _descriptor_7.fromValue(Contract._query(context,
                                                     partialProofData,
                                                     [
                                                      { dup: { n: 0 } },
                                                      { idx: { cached: false,
                                                               pushPath: false,
                                                               path: [
                                                                      { tag: 'value',
                                                                        value: { value: _descriptor_11.toValue(0n),
                                                                                 alignment: _descriptor_11.alignment() } },
                                                                      { tag: 'value',
                                                                        value: { value: _descriptor_11.toValue(1n),
                                                                                 alignment: _descriptor_11.alignment() } }
                                                                     ] } },
                                                      { popeq: { cached: true,
                                                                 result: undefined } }
                                                     ]).value);
    },
    get playerOnePk() {
      return _descriptor_2.fromValue(Contract._query(context,
                                                     partialProofData,
                                                     [
                                                      { dup: { n: 0 } },
                                                      { idx: { cached: false,
                                                               pushPath: false,
                                                               path: [
                                                                      { tag: 'value',
                                                                        value: { value: _descriptor_11.toValue(0n),
                                                                                 alignment: _descriptor_11.alignment() } },
                                                                      { tag: 'value',
                                                                        value: { value: _descriptor_11.toValue(2n),
                                                                                 alignment: _descriptor_11.alignment() } }
                                                                     ] } },
                                                      { popeq: { cached: false,
                                                                 result: undefined } }
                                                     ]).value);
    },
    playerOneGrid: {
      isEmpty(...args) {
        if (args.length !== 0)
          throw new __compactRuntime.CompactError(`is_empty: expected 0 arguments, received ${args.length}`);
        return _descriptor_6.fromValue(Contract._query(context,
                                                       partialProofData,
                                                       [
                                                        { dup: { n: 0 } },
                                                        { idx: { cached: false,
                                                                 pushPath: false,
                                                                 path: [
                                                                        { tag: 'value',
                                                                          value: { value: _descriptor_11.toValue(0n),
                                                                                   alignment: _descriptor_11.alignment() } },
                                                                        { tag: 'value',
                                                                          value: { value: _descriptor_11.toValue(3n),
                                                                                   alignment: _descriptor_11.alignment() } }
                                                                       ] } },
                                                        'size',
                                                        { push: { storage: false,
                                                                  value: __compactRuntime.StateValue.newCell({ value: _descriptor_7.toValue(0n),
                                                                                                               alignment: _descriptor_7.alignment() }).encode() } },
                                                        'eq',
                                                        { popeq: { cached: true,
                                                                   result: undefined } }
                                                       ]).value);
      },
      size(...args) {
        if (args.length !== 0)
          throw new __compactRuntime.CompactError(`size: expected 0 arguments, received ${args.length}`);
        return _descriptor_7.fromValue(Contract._query(context,
                                                       partialProofData,
                                                       [
                                                        { dup: { n: 0 } },
                                                        { idx: { cached: false,
                                                                 pushPath: false,
                                                                 path: [
                                                                        { tag: 'value',
                                                                          value: { value: _descriptor_11.toValue(0n),
                                                                                   alignment: _descriptor_11.alignment() } },
                                                                        { tag: 'value',
                                                                          value: { value: _descriptor_11.toValue(3n),
                                                                                   alignment: _descriptor_11.alignment() } }
                                                                       ] } },
                                                        'size',
                                                        { popeq: { cached: true,
                                                                   result: undefined } }
                                                       ]).value);
      },
      member(...args) {
        if (args.length !== 1)
          throw new __compactRuntime.CompactError(`member: expected 1 argument, received ${args.length}`);
        const key = args[0];
        if (!(typeof(key) === 'bigint' && key >= 0 && key <= 4294967295n))
          __compactRuntime.type_error('member',
                                      'argument 1',
                                      './src/naval-battle-game.compact line 19, char 1',
                                      'Uint<0..4294967295>',
                                      key)
        return _descriptor_6.fromValue(Contract._query(context,
                                                       partialProofData,
                                                       [
                                                        { dup: { n: 0 } },
                                                        { idx: { cached: false,
                                                                 pushPath: false,
                                                                 path: [
                                                                        { tag: 'value',
                                                                          value: { value: _descriptor_11.toValue(0n),
                                                                                   alignment: _descriptor_11.alignment() } },
                                                                        { tag: 'value',
                                                                          value: { value: _descriptor_11.toValue(3n),
                                                                                   alignment: _descriptor_11.alignment() } }
                                                                       ] } },
                                                        { push: { storage: false,
                                                                  value: __compactRuntime.StateValue.newCell({ value: _descriptor_3.toValue(key),
                                                                                                               alignment: _descriptor_3.alignment() }).encode() } },
                                                        'member',
                                                        { popeq: { cached: true,
                                                                   result: undefined } }
                                                       ]).value);
      },
      lookup(...args) {
        if (args.length !== 1)
          throw new __compactRuntime.CompactError(`lookup: expected 1 argument, received ${args.length}`);
        const key = args[0];
        if (!(typeof(key) === 'bigint' && key >= 0 && key <= 4294967295n))
          __compactRuntime.type_error('lookup',
                                      'argument 1',
                                      './src/naval-battle-game.compact line 19, char 1',
                                      'Uint<0..4294967295>',
                                      key)
        return _descriptor_4.fromValue(Contract._query(context,
                                                       partialProofData,
                                                       [
                                                        { dup: { n: 0 } },
                                                        { idx: { cached: false,
                                                                 pushPath: false,
                                                                 path: [
                                                                        { tag: 'value',
                                                                          value: { value: _descriptor_11.toValue(0n),
                                                                                   alignment: _descriptor_11.alignment() } },
                                                                        { tag: 'value',
                                                                          value: { value: _descriptor_11.toValue(3n),
                                                                                   alignment: _descriptor_11.alignment() } }
                                                                       ] } },
                                                        { idx: { cached: false,
                                                                 pushPath: false,
                                                                 path: [
                                                                        { tag: 'value',
                                                                          value: { value: _descriptor_3.toValue(key),
                                                                                   alignment: _descriptor_3.alignment() } }
                                                                       ] } },
                                                        { popeq: { cached: false,
                                                                   result: undefined } }
                                                       ]).value);
      },
      [Symbol.iterator](...args) {
        if (args.length !== 0)
          throw new __compactRuntime.CompactError(`iter: expected 0 arguments, received ${args.length}`);
        const self = state.asArray()[0].asArray()[3];
        return self.asMap().keys().map(  (key) => {    const value = self.asMap().get(key).asCell();    return [      _descriptor_3.fromValue(key.value),      _descriptor_4.fromValue(value.value)    ];  })[Symbol.iterator]();
      }
    },
    get playerOneCommit() {
      return _descriptor_2.fromValue(Contract._query(context,
                                                     partialProofData,
                                                     [
                                                      { dup: { n: 0 } },
                                                      { idx: { cached: false,
                                                               pushPath: false,
                                                               path: [
                                                                      { tag: 'value',
                                                                        value: { value: _descriptor_11.toValue(0n),
                                                                                 alignment: _descriptor_11.alignment() } },
                                                                      { tag: 'value',
                                                                        value: { value: _descriptor_11.toValue(4n),
                                                                                 alignment: _descriptor_11.alignment() } }
                                                                     ] } },
                                                      { popeq: { cached: false,
                                                                 result: undefined } }
                                                     ]).value);
    },
    get playerOneHits() {
      return _descriptor_7.fromValue(Contract._query(context,
                                                     partialProofData,
                                                     [
                                                      { dup: { n: 0 } },
                                                      { idx: { cached: false,
                                                               pushPath: false,
                                                               path: [
                                                                      { tag: 'value',
                                                                        value: { value: _descriptor_11.toValue(1n),
                                                                                 alignment: _descriptor_11.alignment() } },
                                                                      { tag: 'value',
                                                                        value: { value: _descriptor_11.toValue(0n),
                                                                                 alignment: _descriptor_11.alignment() } }
                                                                     ] } },
                                                      { popeq: { cached: true,
                                                                 result: undefined } }
                                                     ]).value);
    },
    get playerOneHasCommitted() {
      return _descriptor_6.fromValue(Contract._query(context,
                                                     partialProofData,
                                                     [
                                                      { dup: { n: 0 } },
                                                      { idx: { cached: false,
                                                               pushPath: false,
                                                               path: [
                                                                      { tag: 'value',
                                                                        value: { value: _descriptor_11.toValue(1n),
                                                                                 alignment: _descriptor_11.alignment() } },
                                                                      { tag: 'value',
                                                                        value: { value: _descriptor_11.toValue(1n),
                                                                                 alignment: _descriptor_11.alignment() } }
                                                                     ] } },
                                                      { popeq: { cached: false,
                                                                 result: undefined } }
                                                     ]).value);
    },
    get playerOneHasJoinedTheGame() {
      return _descriptor_6.fromValue(Contract._query(context,
                                                     partialProofData,
                                                     [
                                                      { dup: { n: 0 } },
                                                      { idx: { cached: false,
                                                               pushPath: false,
                                                               path: [
                                                                      { tag: 'value',
                                                                        value: { value: _descriptor_11.toValue(1n),
                                                                                 alignment: _descriptor_11.alignment() } },
                                                                      { tag: 'value',
                                                                        value: { value: _descriptor_11.toValue(2n),
                                                                                 alignment: _descriptor_11.alignment() } }
                                                                     ] } },
                                                      { popeq: { cached: false,
                                                                 result: undefined } }
                                                     ]).value);
    },
    get playerOneTimeToPlay() {
      return _descriptor_6.fromValue(Contract._query(context,
                                                     partialProofData,
                                                     [
                                                      { dup: { n: 0 } },
                                                      { idx: { cached: false,
                                                               pushPath: false,
                                                               path: [
                                                                      { tag: 'value',
                                                                        value: { value: _descriptor_11.toValue(1n),
                                                                                 alignment: _descriptor_11.alignment() } },
                                                                      { tag: 'value',
                                                                        value: { value: _descriptor_11.toValue(3n),
                                                                                 alignment: _descriptor_11.alignment() } }
                                                                     ] } },
                                                      { popeq: { cached: false,
                                                                 result: undefined } }
                                                     ]).value);
    },
    get playerOneCurrentMove() {
      return _descriptor_5.fromValue(Contract._query(context,
                                                     partialProofData,
                                                     [
                                                      { dup: { n: 0 } },
                                                      { idx: { cached: false,
                                                               pushPath: false,
                                                               path: [
                                                                      { tag: 'value',
                                                                        value: { value: _descriptor_11.toValue(1n),
                                                                                 alignment: _descriptor_11.alignment() } },
                                                                      { tag: 'value',
                                                                        value: { value: _descriptor_11.toValue(4n),
                                                                                 alignment: _descriptor_11.alignment() } }
                                                                     ] } },
                                                      { popeq: { cached: false,
                                                                 result: undefined } }
                                                     ]).value);
    },
    get playerOneIsWinner() {
      return _descriptor_6.fromValue(Contract._query(context,
                                                     partialProofData,
                                                     [
                                                      { dup: { n: 0 } },
                                                      { idx: { cached: false,
                                                               pushPath: false,
                                                               path: [
                                                                      { tag: 'value',
                                                                        value: { value: _descriptor_11.toValue(1n),
                                                                                 alignment: _descriptor_11.alignment() } },
                                                                      { tag: 'value',
                                                                        value: { value: _descriptor_11.toValue(5n),
                                                                                 alignment: _descriptor_11.alignment() } }
                                                                     ] } },
                                                      { popeq: { cached: false,
                                                                 result: undefined } }
                                                     ]).value);
    },
    get playerTwoPk() {
      return _descriptor_2.fromValue(Contract._query(context,
                                                     partialProofData,
                                                     [
                                                      { dup: { n: 0 } },
                                                      { idx: { cached: false,
                                                               pushPath: false,
                                                               path: [
                                                                      { tag: 'value',
                                                                        value: { value: _descriptor_11.toValue(1n),
                                                                                 alignment: _descriptor_11.alignment() } },
                                                                      { tag: 'value',
                                                                        value: { value: _descriptor_11.toValue(6n),
                                                                                 alignment: _descriptor_11.alignment() } }
                                                                     ] } },
                                                      { popeq: { cached: false,
                                                                 result: undefined } }
                                                     ]).value);
    },
    playerTwoGrid: {
      isEmpty(...args) {
        if (args.length !== 0)
          throw new __compactRuntime.CompactError(`is_empty: expected 0 arguments, received ${args.length}`);
        return _descriptor_6.fromValue(Contract._query(context,
                                                       partialProofData,
                                                       [
                                                        { dup: { n: 0 } },
                                                        { idx: { cached: false,
                                                                 pushPath: false,
                                                                 path: [
                                                                        { tag: 'value',
                                                                          value: { value: _descriptor_11.toValue(1n),
                                                                                   alignment: _descriptor_11.alignment() } },
                                                                        { tag: 'value',
                                                                          value: { value: _descriptor_11.toValue(7n),
                                                                                   alignment: _descriptor_11.alignment() } }
                                                                       ] } },
                                                        'size',
                                                        { push: { storage: false,
                                                                  value: __compactRuntime.StateValue.newCell({ value: _descriptor_7.toValue(0n),
                                                                                                               alignment: _descriptor_7.alignment() }).encode() } },
                                                        'eq',
                                                        { popeq: { cached: true,
                                                                   result: undefined } }
                                                       ]).value);
      },
      size(...args) {
        if (args.length !== 0)
          throw new __compactRuntime.CompactError(`size: expected 0 arguments, received ${args.length}`);
        return _descriptor_7.fromValue(Contract._query(context,
                                                       partialProofData,
                                                       [
                                                        { dup: { n: 0 } },
                                                        { idx: { cached: false,
                                                                 pushPath: false,
                                                                 path: [
                                                                        { tag: 'value',
                                                                          value: { value: _descriptor_11.toValue(1n),
                                                                                   alignment: _descriptor_11.alignment() } },
                                                                        { tag: 'value',
                                                                          value: { value: _descriptor_11.toValue(7n),
                                                                                   alignment: _descriptor_11.alignment() } }
                                                                       ] } },
                                                        'size',
                                                        { popeq: { cached: true,
                                                                   result: undefined } }
                                                       ]).value);
      },
      member(...args) {
        if (args.length !== 1)
          throw new __compactRuntime.CompactError(`member: expected 1 argument, received ${args.length}`);
        const key = args[0];
        if (!(typeof(key) === 'bigint' && key >= 0 && key <= 4294967295n))
          __compactRuntime.type_error('member',
                                      'argument 1',
                                      './src/naval-battle-game.compact line 29, char 1',
                                      'Uint<0..4294967295>',
                                      key)
        return _descriptor_6.fromValue(Contract._query(context,
                                                       partialProofData,
                                                       [
                                                        { dup: { n: 0 } },
                                                        { idx: { cached: false,
                                                                 pushPath: false,
                                                                 path: [
                                                                        { tag: 'value',
                                                                          value: { value: _descriptor_11.toValue(1n),
                                                                                   alignment: _descriptor_11.alignment() } },
                                                                        { tag: 'value',
                                                                          value: { value: _descriptor_11.toValue(7n),
                                                                                   alignment: _descriptor_11.alignment() } }
                                                                       ] } },
                                                        { push: { storage: false,
                                                                  value: __compactRuntime.StateValue.newCell({ value: _descriptor_3.toValue(key),
                                                                                                               alignment: _descriptor_3.alignment() }).encode() } },
                                                        'member',
                                                        { popeq: { cached: true,
                                                                   result: undefined } }
                                                       ]).value);
      },
      lookup(...args) {
        if (args.length !== 1)
          throw new __compactRuntime.CompactError(`lookup: expected 1 argument, received ${args.length}`);
        const key = args[0];
        if (!(typeof(key) === 'bigint' && key >= 0 && key <= 4294967295n))
          __compactRuntime.type_error('lookup',
                                      'argument 1',
                                      './src/naval-battle-game.compact line 29, char 1',
                                      'Uint<0..4294967295>',
                                      key)
        return _descriptor_4.fromValue(Contract._query(context,
                                                       partialProofData,
                                                       [
                                                        { dup: { n: 0 } },
                                                        { idx: { cached: false,
                                                                 pushPath: false,
                                                                 path: [
                                                                        { tag: 'value',
                                                                          value: { value: _descriptor_11.toValue(1n),
                                                                                   alignment: _descriptor_11.alignment() } },
                                                                        { tag: 'value',
                                                                          value: { value: _descriptor_11.toValue(7n),
                                                                                   alignment: _descriptor_11.alignment() } }
                                                                       ] } },
                                                        { idx: { cached: false,
                                                                 pushPath: false,
                                                                 path: [
                                                                        { tag: 'value',
                                                                          value: { value: _descriptor_3.toValue(key),
                                                                                   alignment: _descriptor_3.alignment() } }
                                                                       ] } },
                                                        { popeq: { cached: false,
                                                                   result: undefined } }
                                                       ]).value);
      },
      [Symbol.iterator](...args) {
        if (args.length !== 0)
          throw new __compactRuntime.CompactError(`iter: expected 0 arguments, received ${args.length}`);
        const self = state.asArray()[1].asArray()[7];
        return self.asMap().keys().map(  (key) => {    const value = self.asMap().get(key).asCell();    return [      _descriptor_3.fromValue(key.value),      _descriptor_4.fromValue(value.value)    ];  })[Symbol.iterator]();
      }
    },
    get playerTwoCommit() {
      return _descriptor_2.fromValue(Contract._query(context,
                                                     partialProofData,
                                                     [
                                                      { dup: { n: 0 } },
                                                      { idx: { cached: false,
                                                               pushPath: false,
                                                               path: [
                                                                      { tag: 'value',
                                                                        value: { value: _descriptor_11.toValue(1n),
                                                                                 alignment: _descriptor_11.alignment() } },
                                                                      { tag: 'value',
                                                                        value: { value: _descriptor_11.toValue(8n),
                                                                                 alignment: _descriptor_11.alignment() } }
                                                                     ] } },
                                                      { popeq: { cached: false,
                                                                 result: undefined } }
                                                     ]).value);
    },
    get playerTwoHits() {
      return _descriptor_7.fromValue(Contract._query(context,
                                                     partialProofData,
                                                     [
                                                      { dup: { n: 0 } },
                                                      { idx: { cached: false,
                                                               pushPath: false,
                                                               path: [
                                                                      { tag: 'value',
                                                                        value: { value: _descriptor_11.toValue(1n),
                                                                                 alignment: _descriptor_11.alignment() } },
                                                                      { tag: 'value',
                                                                        value: { value: _descriptor_11.toValue(9n),
                                                                                 alignment: _descriptor_11.alignment() } }
                                                                     ] } },
                                                      { popeq: { cached: true,
                                                                 result: undefined } }
                                                     ]).value);
    },
    get playerTwoHasCommitted() {
      return _descriptor_6.fromValue(Contract._query(context,
                                                     partialProofData,
                                                     [
                                                      { dup: { n: 0 } },
                                                      { idx: { cached: false,
                                                               pushPath: false,
                                                               path: [
                                                                      { tag: 'value',
                                                                        value: { value: _descriptor_11.toValue(1n),
                                                                                 alignment: _descriptor_11.alignment() } },
                                                                      { tag: 'value',
                                                                        value: { value: _descriptor_11.toValue(10n),
                                                                                 alignment: _descriptor_11.alignment() } }
                                                                     ] } },
                                                      { popeq: { cached: false,
                                                                 result: undefined } }
                                                     ]).value);
    },
    get playerTwoHasJoinedTheGame() {
      return _descriptor_6.fromValue(Contract._query(context,
                                                     partialProofData,
                                                     [
                                                      { dup: { n: 0 } },
                                                      { idx: { cached: false,
                                                               pushPath: false,
                                                               path: [
                                                                      { tag: 'value',
                                                                        value: { value: _descriptor_11.toValue(1n),
                                                                                 alignment: _descriptor_11.alignment() } },
                                                                      { tag: 'value',
                                                                        value: { value: _descriptor_11.toValue(11n),
                                                                                 alignment: _descriptor_11.alignment() } }
                                                                     ] } },
                                                      { popeq: { cached: false,
                                                                 result: undefined } }
                                                     ]).value);
    },
    get playerTwoTimeToPlay() {
      return _descriptor_6.fromValue(Contract._query(context,
                                                     partialProofData,
                                                     [
                                                      { dup: { n: 0 } },
                                                      { idx: { cached: false,
                                                               pushPath: false,
                                                               path: [
                                                                      { tag: 'value',
                                                                        value: { value: _descriptor_11.toValue(1n),
                                                                                 alignment: _descriptor_11.alignment() } },
                                                                      { tag: 'value',
                                                                        value: { value: _descriptor_11.toValue(12n),
                                                                                 alignment: _descriptor_11.alignment() } }
                                                                     ] } },
                                                      { popeq: { cached: false,
                                                                 result: undefined } }
                                                     ]).value);
    },
    get playerTwoCurrentMove() {
      return _descriptor_5.fromValue(Contract._query(context,
                                                     partialProofData,
                                                     [
                                                      { dup: { n: 0 } },
                                                      { idx: { cached: false,
                                                               pushPath: false,
                                                               path: [
                                                                      { tag: 'value',
                                                                        value: { value: _descriptor_11.toValue(1n),
                                                                                 alignment: _descriptor_11.alignment() } },
                                                                      { tag: 'value',
                                                                        value: { value: _descriptor_11.toValue(13n),
                                                                                 alignment: _descriptor_11.alignment() } }
                                                                     ] } },
                                                      { popeq: { cached: false,
                                                                 result: undefined } }
                                                     ]).value);
    },
    get playerTwoIsWinner() {
      return _descriptor_6.fromValue(Contract._query(context,
                                                     partialProofData,
                                                     [
                                                      { dup: { n: 0 } },
                                                      { idx: { cached: false,
                                                               pushPath: false,
                                                               path: [
                                                                      { tag: 'value',
                                                                        value: { value: _descriptor_11.toValue(1n),
                                                                                 alignment: _descriptor_11.alignment() } },
                                                                      { tag: 'value',
                                                                        value: { value: _descriptor_11.toValue(14n),
                                                                                 alignment: _descriptor_11.alignment() } }
                                                                     ] } },
                                                      { popeq: { cached: false,
                                                                 result: undefined } }
                                                     ]).value);
    }
  };
}
const _emptyContext = {
  originalState: new __compactRuntime.ContractState(),
  transactionContext: new __compactRuntime.QueryContext(new __compactRuntime.ContractState().data, __compactRuntime.dummyContractAddress())
};
const _dummyContract = new Contract({
  local_sk: (...args) => undefined,
  local_gameplay: (...args) => undefined,
  set_local_gameplay: (...args) => undefined
});
const pureCircuits = {
  public_key: (...args) => _dummyContract.circuits.public_key(_emptyContext, ...args).result,
  vectorHash: (...args_0) => _dummyContract.circuits.vectorHash(_emptyContext, ...args_0).result
};
const contractReferenceLocations = { tag: 'publicLedgerArray', indices: { } };
exports.Contract = Contract;
exports.ledger = ledger;
exports.pureCircuits = pureCircuits;
exports.contractReferenceLocations = contractReferenceLocations;
//# sourceMappingURL=index.cjs.map
